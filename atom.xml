<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ewan&#39;s Blog</title>
  <subtitle>Ewan&#39;s Blog | 杨依园技术博客 | 专注于PHP，涉及MySQL，Linux，Web，Nginx，Apache，Phalcon，Laravel，Redis，PostgreSql，Composer，Beanstalkd，Swoole</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iooeo.com/"/>
  <updated>2017-07-07T03:31:55.000Z</updated>
  <id>http://www.iooeo.com/</id>
  
  <author>
    <name>Ewan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>评论系统相继关闭</title>
    <link href="http://www.iooeo.com/2017/07/07/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E7%9B%B8%E7%BB%A7%E5%85%B3%E9%97%AD/"/>
    <id>http://www.iooeo.com/2017/07/07/评论系统相继关闭/</id>
    <published>2017-07-07T03:28:57.000Z</published>
    <updated>2017-07-07T03:31:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前段时间,多说系统宣布关闭停止服务,偶感还挺可惜的.<br>最近折腾这上了网易跟帖,来替换多说,今天登陆网易跟帖后台,又看到了一个不好的消息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">网易云跟贴停止服务公告</div><div class="line">亲爱的朋友们：</div><div class="line"></div><div class="line">因公司业务发展需要，我们不得不遗憾地通知大家，云跟贴产品将于2017年8月1日停止服务。在此之前可以通过后台的数据导出功能导出自己站点的跟贴数据。感谢大家一直以来对云跟贴的支持与厚爱，对于此次产品关停给您带来的不便我们深表歉意，希望在网易其他产品与业务上，我们能继续为您服务！</div><div class="line"></div><div class="line">网易云跟贴</div><div class="line"></div><div class="line">2017年7月6日</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前段时间,多说系统宣布关闭停止服务,偶感还挺可惜的.&lt;br&gt;最近折腾这上了网易跟帖,来替换多说,今天登陆网易跟帖后台,又看到了一个不好的消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
    
    </summary>
    
      <category term="杂谈" scheme="http://www.iooeo.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="微语" scheme="http://www.iooeo.com/tags/%E5%BE%AE%E8%AF%AD/"/>
    
      <category term="胡侃" scheme="http://www.iooeo.com/tags/%E8%83%A1%E4%BE%83/"/>
    
  </entry>
  
  <entry>
    <title>lantern Mac版编译 免费</title>
    <link href="http://www.iooeo.com/2017/07/07/lantern-Mac%E7%89%88%E7%BC%96%E8%AF%91-%E5%85%8D%E8%B4%B9/"/>
    <id>http://www.iooeo.com/2017/07/07/lantern-Mac版编译-免费/</id>
    <published>2017-07-07T03:06:12.000Z</published>
    <updated>2017-07-07T03:25:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>蓝灯,Mac版编译</p>
<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p><em>Homebrew</em>,macOS 缺失的软件包管理器,没用过的可以过去了解一下<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a><br>lantern之前先安装一下<em>Homebrew</em>,终端输入<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure></p>
<p><em>Homebrew</em>安装完成以后,安装git,已安装的可以忽略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure></p>
<h2 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h2><ul>
<li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境</li>
<li>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型,使其轻量又高效</li>
<li>Node.js 的包管理器 npm,是全球最大的开源库生态系统<br><a href="http://nodejs.cn/download/" target="_blank" rel="external">Node下载</a>,选择Mac版下载,安装下一步下一步就行….</li>
</ul>
<h2 id="其他预安装"><a href="#其他预安装" class="headerlink" title="其他预安装"></a>其他预安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ brew install go</div><div class="line">$ npm i gulp-cli -g</div><div class="line">$ npm install -g appdmg</div><div class="line">$ npm install -g svgexport</div></pre></td></tr></table></figure>
<h2 id="lantern-Mac编译"><a href="#lantern-Mac编译" class="headerlink" title="lantern Mac编译"></a>lantern Mac编译</h2><p>找个文件夹把lantern下载下来<br>可以直接用GitHub下载,cd到你放置lantern的文件夹,终端输入命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone --depth=1 https://github.com/getlantern/lantern.git</div></pre></td></tr></table></figure></p>
<p>下载以后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd lantern</div><div class="line">$ export VERSION=9.9.9</div><div class="line">$ make darwin</div></pre></td></tr></table></figure></p>
<p>编译的时候回出现以下错误<br><img src="http://ogpq2zwg5.bkt.clouddn.com/WechatIMG7.jpeg" alt="编译是错误图片"><br>根据错误信息指出的路径在lantern文件夹中找到对应的文件及行数<br>1 只需要把<em>MaxIdleTime</em>改为<em>IdleConnTimeout</em><br>2 然后把下面紧接的调用<em>EnforceMaxIdleTime()</em>这个方法的语句注释掉</p>
<p>就改这两个文件中的4行就行,重新编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make darwin</div></pre></td></tr></table></figure></p>
<p>编译完成后,你会在你的lantern文件夹中找到名为<em>lantern_darwin_amd64</em>的文件,说明完全没问题了</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>然后在你的Mac上搜索一下<em>lantern_darwin_amd64</em>,双击打开就可以了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;蓝灯,Mac版编译&lt;/p&gt;
&lt;h2 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Homebrew&lt;/em&gt;,macOS 缺失的软件包管理器,没用过的可以过去了解一下&lt;a href=&quot;https://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt;&lt;br&gt;lantern之前先安装一下&lt;em&gt;Homebrew&lt;/em&gt;,终端输入&lt;br&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://www.iooeo.com/categories/Mac/"/>
    
    
      <category term="lantern" scheme="http://www.iooeo.com/tags/lantern/"/>
    
      <category term="Mac" scheme="http://www.iooeo.com/tags/Mac/"/>
    
      <category term="VPN" scheme="http://www.iooeo.com/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+coding搭建个人博客 - 百度和Google收录篇</title>
    <link href="http://www.iooeo.com/2017/07/04/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20%E7%99%BE%E5%BA%A6%E5%92%8CGoogle%E6%94%B6%E5%BD%95%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/04/Hexo+Github+coding搭建个人博客 - 百度和Google收录篇/</id>
    <published>2017-07-04T06:39:48.000Z</published>
    <updated>2017-07-04T08:45:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>网站地图</p>
<blockquote>
<p>网站地图，又称站点地图，它就是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接（注：不是所有页面）。大多数人在网站上找不到自己所需要的信息时，可能会将网站地图作为一种补救措施。搜索引擎蜘蛛非常喜欢网站地图</p>
</blockquote>
<a id="more"></a>
<h2 id="Hexo博客生产站点地图"><a href="#Hexo博客生产站点地图" class="headerlink" title="Hexo博客生产站点地图"></a>Hexo博客生产站点地图</h2><p>进入Hexo博客根目录，安装百度和Google的站点地图生成插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-baidu-sitemap --save</div><div class="line">$ npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure></p>
<p>在博客根目录的_config.yml配置文件种添加一下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 自动生成sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure></p>
<p>编译部署博客代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>边已完成,你会发现你的博客编译完成的代码目录public种生成了baidusitemap.xml和sitemap.xml<br>此时我们访问域名下面的这两个文件,看看有没有</p>
<ul>
<li><a href="http://www.iooeo.com/baidusitemap.xml">http://www.iooeo.com/baidusitemap.xml</a></li>
<li><a href="http://www.iooeo.com/sitemap.xml">http://www.iooeo.com/sitemap.xml</a></li>
</ul>
<p>这样百度和Google的爬虫就可以通过这个来爬取你的博客内容了</p>
<h2 id="查看博客是否已经被收录"><a href="#查看博客是否已经被收录" class="headerlink" title="查看博客是否已经被收录"></a>查看博客是否已经被收录</h2><p>在百度和Google分别输入搜索:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">site:iooeo.com</div></pre></td></tr></table></figure></p>
<p>这里需要将iooeo.com换成你们自己的域名</p>
<h2 id="百度验证网站"><a href="#百度验证网站" class="headerlink" title="百度验证网站"></a>百度验证网站</h2><ul>
<li><a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="external">百度链接提交</a></li>
</ul>
<p>在链接提交输入框中输入你的域名,点击提交即可</p>
<h3 id="验证站点"><a href="#验证站点" class="headerlink" title="验证站点"></a>验证站点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">点击站点管理,依次输入信息</div><div class="line">第二步*验证网站*,选择文件验证,下载验证文件</div><div class="line">将验证文件放在所应用的主题的source下`/themes/主题/source/`</div><div class="line">执行文件部署</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div><div class="line">部署完成之后点击立即验证或者直接访问,域名/百度验证文件名,下边是我的</div></pre></td></tr></table></figure>
<p><a href="http://www.iooeo.com/baidu_verify_a501VUvpmw.html">http://www.iooeo.com/baidu_verify_a501VUvpmw.html</a></p>
<h3 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h3><p>点击链接提交,选择网站<br>如何选择链接提交方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</div><div class="line">2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</div><div class="line">3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</div><div class="line">4、手动提交：一次性提交链接给百度，可以使用此种方式。</div></pre></td></tr></table></figure></p>
<p>sitemap提交</p>
<blockquote>
<p>这个时候需要用到上面生产的sitemap了,选择自动提交种的sitemap,将<a href="http://www.iooeo.com/baidusitemap.xml">http://www.iooeo.com/baidusitemap.xml</a>粘贴到输入框内,输入验证码,点击提交<br>下面的列表就会出现你添加的sitemap链接了,这个时候状态栏显示的应该是等待,一般过几十秒刷新一下页面就会正常,然后百度就会自动的周期抓取你的sitemap</p>
</blockquote>
<p>自动推送</p>
<blockquote>
<p>安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度。<br>可以将下面代码添加到post模板中,这样每篇文章生成的时候都会有自动推送代码<br>最直接的就是直接添加到主题目录下的layout/post.swig文件下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">(function()&#123;</div><div class="line">    var bp = document.createElement(&apos;script&apos;);</div><div class="line">    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];</div><div class="line">    if (curProtocol === &apos;https&apos;) &#123;</div><div class="line">        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        </div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;</div><div class="line">    &#125;</div><div class="line">    var s = document.getElementsByTagName(&quot;script&quot;)[0];</div><div class="line">    s.parentNode.insertBefore(bp, s);</div><div class="line">&#125;)();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>主动推送</p>
<blockquote>
<p>主动推送最为快速的提交方式,是被百度收录最快的推送方式<br>百度提供了主动推送的示例:支持curl、php、python、java、php、ruby等等方式,你可以自己选择一种进行主动推送<br>具体使用帮助请看<a href="http://zhanzhang.baidu.com/linksubmit/index" target="_blank" rel="external">主动推送教程</a></p>
</blockquote>
<h2 id="Google验证网站"><a href="#Google验证网站" class="headerlink" title="Google验证网站"></a>Google验证网站</h2><p><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">Google站点提交入口</a><br>添加站点…<br>验证站点…<br>下载文件…<br>步骤基本跟百度一样…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站地图&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网站地图，又称站点地图，它就是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接（注：不是所有页面）。大多数人在网站上找不到自己所需要的信息时，可能会将网站地图作为一种补救措施。搜索引擎蜘蛛非常喜欢网站地图&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://www.iooeo.com/tags/Github/"/>
    
      <category term="coding" scheme="http://www.iooeo.com/tags/coding/"/>
    
      <category term="Markdown" scheme="http://www.iooeo.com/tags/Markdown/"/>
    
      <category term="搜索引擎" scheme="http://www.iooeo.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+coding搭建个人博客 - 配置域名分流解析篇</title>
    <link href="http://www.iooeo.com/2017/07/04/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E5%88%86%E6%B5%81%E8%A7%A3%E6%9E%90%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/04/Hexo+Github+coding搭建个人博客 - 配置域名分流解析篇/</id>
    <published>2017-07-04T02:25:06.000Z</published>
    <updated>2017-07-04T06:36:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>前边我们已经分别介绍了,Hexo 本地安装,Hexo GitHub 代码部署,Hexo Coding 代码部署实现了通过外网访问自己的博客</p>
<ul>
<li><a href="http://www.iooeo.com/2017/07/03/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20Hexo%20%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E7%AF%87/">Hexo 本地安装篇</a></li>
<li><a href="http://www.iooeo.com/2017/07/03/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20GitHub%20%E7%AF%87/">Hexo GitHub 篇</a></li>
<li><a href="http://www.iooeo.com/2017/07/04/Hexo-Github-coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Coding-%E7%AF%87/">Hexo Coding 篇</a></li>
</ul>
<p>如果你没有自己的域名的话,可能就到此为止了,如果你有属于自己的域名的话,惊喜还在后面,请继续….<br><a id="more"></a></p>
<h2 id="项目内域名配置"><a href="#项目内域名配置" class="headerlink" title="项目内域名配置"></a>项目内域名配置</h2><p>打开你的Hexo项目,在<em>/source/</em>目录下创建以CNAME为文件名称的文件<br>内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">www.iooeo.com</div></pre></td></tr></table></figure></p>
<p><em>www.iooeo.com</em>是我的域名,此处该成你自己的就可以了.<br>然后执行Hexo部署命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>分别登陆Coding和GitHub,进入项目,点击项目的Pages 服务,绑定你的域名<code>GitHub好像自动给添加了</code><br><code>Coding更新了新版本以后,绑定域名必须要会员等级黄金以上,开始商业化了.白银级别的要经过Coding页面5秒钟跳转,而且国内访问GitHub也不是太慢了,现在建议直接走GitHub了,可以忽略Coding部分</code></p>
<h2 id="域名服务商配置域名解析"><a href="#域名服务商配置域名解析" class="headerlink" title="域名服务商配置域名解析"></a>域名服务商配置域名解析</h2><p>添加两条CNAME解析记录,主机记录分别是@和www,解析线路全部为默认,记录值全部为youName.github.io</p>
<hr>
<p><code>Coding没升级之前,Coding负责国内域名分流,GitHub负责国外域名分流,而且Coding访问稍微快一些.
但是可以这种模式没能继续下去,因为Coding已经走向商业化了.当然你要是选择付费升级会员的话,可以继续使用以下这种模式.</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">添加两条CNAME解析记录,主机记录分别是@和www,解析线路全部为默认,记录值全部为youName.coding.me,确保Coding上项目内Pages 服务已绑定域名</div><div class="line">添加两条CNAME解析记录,主机记录分别是@和www,解析线路全部为海外,记录值全部为youName.github.io</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前边我们已经分别介绍了,Hexo 本地安装,Hexo GitHub 代码部署,Hexo Coding 代码部署实现了通过外网访问自己的博客&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iooeo.com/2017/07/03/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20Hexo%20%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E7%AF%87/&quot;&gt;Hexo 本地安装篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iooeo.com/2017/07/03/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20GitHub%20%E7%AF%87/&quot;&gt;Hexo GitHub 篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iooeo.com/2017/07/04/Hexo-Github-coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Coding-%E7%AF%87/&quot;&gt;Hexo Coding 篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你没有自己的域名的话,可能就到此为止了,如果你有属于自己的域名的话,惊喜还在后面,请继续….&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://www.iooeo.com/tags/Github/"/>
    
      <category term="coding" scheme="http://www.iooeo.com/tags/coding/"/>
    
      <category term="Markdown" scheme="http://www.iooeo.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+coding搭建个人博客 - Coding 篇</title>
    <link href="http://www.iooeo.com/2017/07/04/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20Coding%20%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/04/Hexo+Github+coding搭建个人博客 - Coding 篇/</id>
    <published>2017-07-04T01:22:24.000Z</published>
    <updated>2017-07-04T02:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>有Coding的直接登录,没有的<a href="https://coding.net/" target="_blank" rel="external">Coding</a>注册</p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>添加项目,填写项目名称/描述…当然这个名字的格式最好为youName<em>(youName为你的Coding用户名)</em>，例如我的为Mercis<br><a id="more"></a></p>
<h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p><a href="http://www.iooeo.com/2017/07/03/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20GitHub%20%E7%AF%87/">GitHub篇</a>已经讲过了,步骤差不多,现在直接将<em>.ssh/id_rsa.pub</em>的内容copy到Coding-&gt;个人设置-&gt;SSH 公匙,添加即可<br>添加好SSH Key 以后测试,返回 Hi youName!…..表示成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@git.coding.net</div></pre></td></tr></table></figure></p>
<h2 id="部署Hexo项目到Coding"><a href="#部署Hexo项目到Coding" class="headerlink" title="部署Hexo项目到Coding"></a>部署Hexo项目到Coding</h2><p>打开Hexo博客目录下的站点配置文件_config.yml，经过之前<a href="http://www.iooeo.com/2017/07/03/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20GitHub%20%E7%AF%87/">GitHub篇</a>我们的配置已经是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:Mercis/Mercis.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>现在需要改成这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: </div><div class="line">    github: git@github.com:Mercis/Mercis.github.io.git</div><div class="line">    coding: git@git.coding.net:mercis/mercis.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>这个地方值得注意的是<code>当部署仓库有多个时,需要将repo改成键值对的格式,前面的名称可以规范为代码托管平台的名称,自己能区分就行,还是提示一下,yml 格式文件冒号(:)后面必须有一个空格</code><br>执行Hexo部署命令,执行成功后,登录Coding项目已经有你Hexo项目文件了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>开启Coding Pages功能<br>点击项目的Pages服务,部署来源选择master 分支,点击保存,访问<code>http://youName.coding.me/</code>就可以了,这样Coding部署已经正式完成了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有Coding的直接登录,没有的&lt;a href=&quot;https://coding.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coding&lt;/a&gt;注册&lt;/p&gt;
&lt;h2 id=&quot;创建仓库&quot;&gt;&lt;a href=&quot;#创建仓库&quot; class=&quot;headerlink&quot; title=&quot;创建仓库&quot;&gt;&lt;/a&gt;创建仓库&lt;/h2&gt;&lt;p&gt;添加项目,填写项目名称/描述…当然这个名字的格式最好为youName&lt;em&gt;(youName为你的Coding用户名)&lt;/em&gt;，例如我的为Mercis&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://www.iooeo.com/tags/Github/"/>
    
      <category term="coding" scheme="http://www.iooeo.com/tags/coding/"/>
    
      <category term="Markdown" scheme="http://www.iooeo.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+coding搭建个人博客 - GitHub 篇</title>
    <link href="http://www.iooeo.com/2017/07/03/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20GitHub%20%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/03/Hexo+Github+coding搭建个人博客 - GitHub 篇/</id>
    <published>2017-07-03T07:32:48.000Z</published>
    <updated>2017-07-03T10:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>有GitHub的直接登录,没有的<a href="https://github.com/" target="_blank" rel="external">GitHub</a>注册</p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>仓库(Repository)用来放置代码文件,登录之后点击右上角加号,点击New repository<br><a id="more"></a><br><img src="http://ogpq2zwg5.bkt.clouddn.com/WechatIMG6.jpeg" alt="New repository"><br>创建时,只需要填写Repository name即可,当然这个名字的格式必须为youName.github.io<em>(youName为你的Github用户名)</em>，例如我的为Mercis.github.io</p>
<h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>为了防止每次部署需要输入密码的麻烦,这里使用SSH Key登录<br>生成SSH Key,yourEmail@example.com 替换为你自己的邮箱,过程中需要输入密码等操作,可以全部回车使用默认的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;yourEmail@example.com&quot;</div></pre></td></tr></table></figure></p>
<p>完成之后,用户目录下回多一个.ssh文件夹,里面包含id_rsa和id_rsa.pub两个文件<br>复制id_rsa.pub中的内容<br>添加SSH key到GitHub<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">进入GitHub账号设置页面</div><div class="line">左侧选择 **SSH and GPG keys**</div><div class="line">点击 **New SSH key** 或者 **Add SSH key**</div><div class="line">在&apos;Title&apos;字段中填写此SSH Key的名称，在&apos;Key&apos;字段中填写上面复制好的内容</div><div class="line">点击 **Add SSH key**</div><div class="line">输入账户密码确定操作</div></pre></td></tr></table></figure></p>
<p>测试SSH Key 是否配置成功,返回 Hi youName!…..表示成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>详细步骤请查看<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="external">GitHub官方添加SSH Key教程</a></p>
<h2 id="部署Hexo项目到GitHub"><a href="#部署Hexo项目到GitHub" class="headerlink" title="部署Hexo项目到GitHub"></a>部署Hexo项目到GitHub</h2><p>部署之前,安装hexo-deployer-git插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>打开Hexo博客目录下的站点配置文件_config.yml，修改部署配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:youName/youName.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>执行Hexo部署命令,执行成功后,登录GitHub项目已经有你Hexo项目文件了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>开启GitHub Pages功能<br>因为youName.github.io项目名称是用的youName,所以GitHub Pages是默认配置好的</p>
<h2 id="添加新文章"><a href="#添加新文章" class="headerlink" title="添加新文章"></a>添加新文章</h2><p>创建文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;myNewPost&quot;</div></pre></td></tr></table></figure></p>
<p>编辑文章内容<br>打开Hexo博客目录下的<em>source/_post/myNewPost.md</em><br>Hexo 中文章是使用的Markdown语法，不知道MarkDown的自行百度,附送非官方链接<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">语法说明</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: myNewPost #最后生成的页面Title</div><div class="line">tags:</div><div class="line">  - tag1</div><div class="line">  - tag2  # 文章标签</div><div class="line">categories:</div><div class="line">  - category1 #文章分类</div><div class="line">date: 2016-08-31 23:41:19 # 文章发表日期</div><div class="line">---</div><div class="line">这里是文章正文。</div><div class="line">可以写文章首页简介</div><div class="line">&lt;!--more--&gt;</div><div class="line">这里的内容是查看详情才显示的</div></pre></td></tr></table></figure></p>
<p>编辑完新文章之后<br>生成静态文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 生成静态文件</div></pre></td></tr></table></figure></p>
<p>本地预览<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>发布到GitHub<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>然后就可以去你的youName.github.io查看一下啦….</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有GitHub的直接登录,没有的&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;注册&lt;/p&gt;
&lt;h2 id=&quot;创建仓库&quot;&gt;&lt;a href=&quot;#创建仓库&quot; class=&quot;headerlink&quot; title=&quot;创建仓库&quot;&gt;&lt;/a&gt;创建仓库&lt;/h2&gt;&lt;p&gt;仓库(Repository)用来放置代码文件,登录之后点击右上角加号,点击New repository&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://www.iooeo.com/tags/Github/"/>
    
      <category term="coding" scheme="http://www.iooeo.com/tags/coding/"/>
    
      <category term="Markdown" scheme="http://www.iooeo.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+coding搭建个人博客 - Hexo 本地安装篇</title>
    <link href="http://www.iooeo.com/2017/07/03/Hexo+Github+coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20-%20Hexo%20%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/03/Hexo+Github+coding搭建个人博客 - Hexo 本地安装篇/</id>
    <published>2017-07-03T06:52:08.000Z</published>
    <updated>2017-07-03T07:33:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前自己摸摸索索把博客搭建好了,最近有人问我怎么搭建的,这里把搭建流程跟大家说下吧</p>
<h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a>开始前准备</h2><p>账号相关: </p>
<ul>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a> </li>
<li><a href="https://coding.net/" target="_blank" rel="external">Coding</a> </li>
<li><a href="https://wanwang.aliyun.com/" target="_blank" rel="external">域名</a></li>
</ul>
<p>服务相关: </p>
<ul>
<li><a href="https://git-scm.com/download" target="_blank" rel="external">Git</a>     </li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><a id="more"></a>
</li>
</ul>
<h2 id="Hexo-安装和配置"><a href="#Hexo-安装和配置" class="headerlink" title="Hexo 安装和配置"></a>Hexo 安装和配置</h2><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo官网</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p>初始化Hexo博客目录,时间可能要久一点…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure></p>
<p>安装依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>生成静态网站<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>本地测试,生成的链接<a href="http://localhost:4000" target="_blank" rel="external">localhost:4000</a>,copy到浏览器直接访问就可以看到效果了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>本地hexo安装已经完毕,可本地运行</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前自己摸摸索索把博客搭建好了,最近有人问我怎么搭建的,这里把搭建流程跟大家说下吧&lt;/p&gt;
&lt;h2 id=&quot;开始前准备&quot;&gt;&lt;a href=&quot;#开始前准备&quot; class=&quot;headerlink&quot; title=&quot;开始前准备&quot;&gt;&lt;/a&gt;开始前准备&lt;/h2&gt;&lt;p&gt;账号相关: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://coding.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coding&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wanwang.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;域名&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务相关: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;     &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://www.iooeo.com/tags/Github/"/>
    
      <category term="coding" scheme="http://www.iooeo.com/tags/coding/"/>
    
      <category term="Markdown" scheme="http://www.iooeo.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 安装AdminLTE后台主题资源包</title>
    <link href="http://www.iooeo.com/2017/03/31/Yii2%20%E5%AE%89%E8%A3%85AdminLTE%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A2%98%E8%B5%84%E6%BA%90%E5%8C%85/"/>
    <id>http://www.iooeo.com/2017/03/31/Yii2 安装AdminLTE后台主题资源包/</id>
    <published>2017-03-31T05:53:00.000Z</published>
    <updated>2017-07-04T08:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了快捷开发后台和界面的统一,这里我们引入了AdminLTE主题资源包<br>AdminLTE的学习请移至<a href="https://github.com/dmstr/yii2-adminlte-asset" target="_blank" rel="external">dmstr/yii2-adminlte-asset</a><br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用composer安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer require dmstr/yii2-adminlte-asset &quot;2.*&quot;</div></pre></td></tr></table></figure></p>
<h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>复制整个<em>vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app</em>目录下的<em>layouts</em>目录和<em>site</em>目录到<em>backend/views</em>,覆盖原始文件</p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>在<em>backend/config/main.php</em>中添加一下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;components&apos; =&gt; [</div><div class="line">    &apos;view&apos; =&gt; [</div><div class="line">         &apos;theme&apos; =&gt; [</div><div class="line">             &apos;pathMap&apos; =&gt; [</div><div class="line">                &apos;@app/views&apos; =&gt; &apos;@vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app&apos;</div><div class="line">             ],</div><div class="line">         ],</div><div class="line">    ],</div><div class="line">],</div></pre></td></tr></table></figure></p>
<h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>如果你<em>backend</em>下没有做任何操作的情况下,你会看到登陆页面已经变了.<br>如果想看一下<em>AdminLTE</em>主题的具体效果,将<em>backend/controllers/SiteController.php</em>做一下修改<br>暂时将行为方法注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public function behaviors()</div><div class="line">    &#123;</div><div class="line">        return [</div><div class="line">            /**</div><div class="line">             * 注释此处,阻止行为方式,查看AdminLTE主题模板效果</div><div class="line">            &apos;access&apos; =&gt; [</div><div class="line">                &apos;class&apos; =&gt; AccessControl::className(),</div><div class="line">                &apos;rules&apos; =&gt; [</div><div class="line">                    [</div><div class="line">                        &apos;actions&apos; =&gt; [&apos;login&apos;, &apos;error&apos;],</div><div class="line">                        &apos;allow&apos; =&gt; true,</div><div class="line">                    ],</div><div class="line">                    [</div><div class="line">                        &apos;actions&apos; =&gt; [&apos;logout&apos;, &apos;index&apos;],</div><div class="line">                        &apos;allow&apos; =&gt; true,</div><div class="line">                        &apos;roles&apos; =&gt; [&apos;@&apos;],</div><div class="line">                    ],</div><div class="line">                ],</div><div class="line">            ],</div><div class="line">             */</div><div class="line">            &apos;verbs&apos; =&gt; [</div><div class="line">                &apos;class&apos; =&gt; VerbFilter::className(),</div><div class="line">                &apos;actions&apos; =&gt; [</div><div class="line">                    &apos;logout&apos; =&gt; [&apos;post&apos;],</div><div class="line">                ],</div><div class="line">            ],</div><div class="line">        ];</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后访问首页,就可以看到<em>AdminLTE</em>主题的具体效果</p>
<h2 id="AdminLTE学习"><a href="#AdminLTE学习" class="headerlink" title="AdminLTE学习"></a>AdminLTE学习</h2><ul>
<li>主题一些简单的页面实例,及学习文档也可以查看<em>vendor/almasaeed2010/adminlte/index.html</em></li>
<li>主题实例<em>vendor/almasaeed2010/adminlte/pages</em></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了快捷开发后台和界面的统一,这里我们引入了AdminLTE主题资源包&lt;br&gt;AdminLTE的学习请移至&lt;a href=&quot;https://github.com/dmstr/yii2-adminlte-asset&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dmstr/yii2-adminlte-asset&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 自动存储更新显示数据库时间戳</title>
    <link href="http://www.iooeo.com/2017/03/31/Yii2%20%E8%87%AA%E5%8A%A8%E5%AD%98%E5%82%A8%E6%9B%B4%E6%96%B0%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <id>http://www.iooeo.com/2017/03/31/Yii2 自动存储更新显示数据库时间戳/</id>
    <published>2017-03-31T05:14:00.000Z</published>
    <updated>2017-03-31T05:48:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们terms表中有两个时间字段<em>create_at</em>和<em>update_at</em>,现在我们来操作一下,使<em>create_at</em>和<em>update_at</em>在存储时自动更新它的时间戳属性</p>
<h2 id="自动存储更新时间戳属性"><a href="#自动存储更新时间戳属性" class="headerlink" title="自动存储更新时间戳属性"></a>自动存储更新时间戳属性</h2><p>这里我们使用TimestampBehavior先不要管行为不行为,今天就是要时间戳属性自动存储更新<br><a id="more"></a></p>
<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>现在我们开始操作<em>/thesaurus/frontend/models/Terms.php</em>,首先别忘了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use yii\behaviors\TimestampBehavior;</div></pre></td></tr></table></figure></p>
<p>然后定义方法<em>behaviors</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * @inheritdoc</div><div class="line">    */</div><div class="line">   public function behaviors()</div><div class="line">   &#123;</div><div class="line">       return [</div><div class="line">           [</div><div class="line">               &apos;class&apos; =&gt; TimestampBehavior::className(),</div><div class="line">               &apos;attributes&apos; =&gt; [</div><div class="line">               	# 添加之前</div><div class="line">                   ActiveRecord::EVENT_BEFORE_INSERT =&gt; [&apos;create_at&apos;, &apos;update_at&apos;],</div><div class="line">                   # 修改之前</div><div class="line">                   ActiveRecord::EVENT_BEFORE_UPDATE =&gt; [&apos;update_at&apos;]</div><div class="line">               ],</div><div class="line">               # 字段值</div><div class="line">               &apos;value&apos; =&gt; time()</div><div class="line">           ]</div><div class="line">       ];</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>配合下面的 <em>afterFind </em> 格式化时间最佳<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * @inheritdoc</div><div class="line">    */</div><div class="line">   public function rules()</div><div class="line">   &#123;</div><div class="line">       return [</div><div class="line">           # 自动补全添加时间和修改时间,配合 afterFind 方法转换格式化时间</div><div class="line">           [&apos;create_at&apos;, &apos;filter&apos;, &apos;filter&apos; =&gt; function () &#123;</div><div class="line">               return $this-&gt;create_at ? strtotime($this-&gt;create_at) : time();</div><div class="line">           &#125;],</div><div class="line">           [&apos;update_at&apos;, &apos;filter&apos;, &apos;filter&apos; =&gt; function () &#123;</div><div class="line">               return $this-&gt;update_at ? strtotime($this-&gt;update_at) : time();</div><div class="line">           &#125;],</div><div class="line">           [[&apos;name&apos;], &apos;required&apos;],</div><div class="line">           [[&apos;create_at&apos;, &apos;update_at&apos;], &apos;integer&apos;],</div><div class="line">           [[&apos;name&apos;], &apos;string&apos;, &apos;max&apos; =&gt; 32],</div><div class="line">       ];</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这个完成以后我们打开<em>/thesaurus/frontend/views/terms/create.php</em><br>看到以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?= $this-&gt;render(&apos;_form&apos;, [</div><div class="line">        &apos;model&apos; =&gt; $model,</div><div class="line"> ]) ?&gt;</div></pre></td></tr></table></figure></p>
<p>然后我们找到<em>/thesaurus/frontend/views/terms/_form.php</em>,把Form表单的<em>create_at</em>和<em>update_at</em>的input框删除掉,只留下<em>name</em><br><img src="https://git.kancloud.cn/repos/cola_uncle/yii2/raw/master/image/screenshot_1489476708515.png?access-token=de29ccf9007bea655d8be6a078533ddd" alt=""><br>然后我们打开<em>local.thef.com/index.php?r=terms</em>,点击<em>Create Terms</em>按钮,表单页面是不是只剩下<em>name</em>一览了,添加一个试试</p>
<h2 id="显示格式化时间"><a href="#显示格式化时间" class="headerlink" title="显示格式化时间"></a>显示格式化时间</h2><p>再让我们回到<em>local.thef.com/index.php?r=terms</em>,是不是已经有我们已经添加的数据了,但是时间是有了,感觉有点不对啊,我也觉得是,有办法<br>继续打开<em>/thesaurus/frontend/models/Terms.php</em><br>添加如下方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * @inheritdoc</div><div class="line">    */</div><div class="line">   public function afterFind()</div><div class="line">   &#123;</div><div class="line">       parent::afterFind();</div><div class="line">       $this-&gt;create_at = date(&apos;Y-m-d H:i:s&apos;, $this-&gt;create_at);</div><div class="line">       $this-&gt;update_at = date(&apos;Y-m-d H:i:s&apos;, $this-&gt;update_at);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>再回头我们的<em>local.thef.com/index.php?r=terms</em>,这下是不是就看着顺眼了.虽然格式化时间的方法很多,但是我觉得这个够了….</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前我们terms表中有两个时间字段&lt;em&gt;create_at&lt;/em&gt;和&lt;em&gt;update_at&lt;/em&gt;,现在我们来操作一下,使&lt;em&gt;create_at&lt;/em&gt;和&lt;em&gt;update_at&lt;/em&gt;在存储时自动更新它的时间戳属性&lt;/p&gt;
&lt;h2 id=&quot;自动存储更新时间戳属性&quot;&gt;&lt;a href=&quot;#自动存储更新时间戳属性&quot; class=&quot;headerlink&quot; title=&quot;自动存储更新时间戳属性&quot;&gt;&lt;/a&gt;自动存储更新时间戳属性&lt;/h2&gt;&lt;p&gt;这里我们使用TimestampBehavior先不要管行为不行为,今天就是要时间戳属性自动存储更新&lt;br&gt;
    
    </summary>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 Gii生成代码</title>
    <link href="http://www.iooeo.com/2017/03/31/Yii2%20Gii%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.iooeo.com/2017/03/31/Yii2 Gii生成代码/</id>
    <published>2017-03-31T04:03:00.000Z</published>
    <updated>2017-03-31T04:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Gii</em>是<em>Yii</em>中的一个模块,有此神器,撸代码都省了好多,简单的先用一下<br>继续拿我们上边的例子来说<br>访问<em>local.thef.com/index.php?r=gii</em>可以看到操作界面<br><img src="https://git.kancloud.cn/repos/cola_uncle/yii2/raw/master/image/screenshot_1489463730495.png?access-token=de29ccf9007bea655d8be6a078533ddd" alt=""><br><a id="more"></a></p>
<h2 id="生成Model"><a href="#生成Model" class="headerlink" title="生成Model"></a>生成Model</h2><p>输入<em>Table Name</em>(有提示,是不是很方便),自动补全<em>Model Class</em><br><img src="https://git.kancloud.cn/repos/cola_uncle/yii2/raw/master/image/screenshot_1489463865303.png?access-token=de29ccf9007bea655d8be6a078533ddd" alt=""></p>
<p><em>Namespace</em>这里只在frontend下使用,就小改一下<br><img src="https://git.kancloud.cn/repos/cola_uncle/yii2/raw/master/image/screenshot_1489463976222.png?access-token=de29ccf9007bea655d8be6a078533ddd" alt=""></p>
<p>最后点击<em>Preview</em>,然后<em>Generate</em>完成,看看<em>thesaurus/frontend/models/</em>目录下是不是多了<em>Terms.php</em><br><img src="https://git.kancloud.cn/repos/cola_uncle/yii2/raw/master/image/screenshot_1489464059329.png?access-token=de29ccf9007bea655d8be6a078533ddd" alt=""></p>
<p>同理点击<em>CRUD Generator</em>,点击<em>Preview</em>,然后<em>Generate</em>完成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">*Model Class*</div><div class="line">frontend\models\Terms</div><div class="line">*Search Model Class*</div><div class="line">frontend\models\TermsSearch</div><div class="line">*Controller Class*</div><div class="line">frontend\controllers\TermsController</div></pre></td></tr></table></figure>
<p>生成文件:</p>
<ul>
<li>/thesaurus/frontend/models/TermsSearch.php</li>
<li>/thesaurus/frontend/controllers/TermsController.php</li>
<li>/thesaurus/frontend/views/terms/_form.php</li>
<li>/thesaurus/frontend/views/terms/_search.php</li>
<li>/thesaurus/frontend/views/terms/create.php</li>
<li>/thesaurus/frontend/views/terms/index.php</li>
<li>/thesaurus/frontend/views/terms/update.php</li>
<li>/thesaurus/frontend/views/terms/view.php</li>
</ul>
<p>然后访问 <em>local.thef.com/index.php?r=terms</em> 就可以进行你的增删查改了,biubiu,是不是很爽</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Gii&lt;/em&gt;是&lt;em&gt;Yii&lt;/em&gt;中的一个模块,有此神器,撸代码都省了好多,简单的先用一下&lt;br&gt;继续拿我们上边的例子来说&lt;br&gt;访问&lt;em&gt;local.thef.com/index.php?r=gii&lt;/em&gt;可以看到操作界面&lt;br&gt;&lt;img src=&quot;https://git.kancloud.cn/repos/cola_uncle/yii2/raw/master/image/screenshot_1489463730495.png?access-token=de29ccf9007bea655d8be6a078533ddd&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 数据库迁移</title>
    <link href="http://www.iooeo.com/2017/03/31/Yii2%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/"/>
    <id>http://www.iooeo.com/2017/03/31/Yii2 数据库迁移/</id>
    <published>2017-03-31T03:58:00.000Z</published>
    <updated>2017-03-31T03:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在开发和维护一个数据库驱动的应用程序时,数据库的结构会随代码的改变而改变. Yii 提供了一个 数据库迁移功,该功能可以记录数据库的变化, 以便使数据库和源代码一起受版本控制.<br>Yii 提供了一整套的迁移命令行工具，通过这些工具你可以:</p>
<ul>
<li>创建新的迁移</li>
<li>提交迁移</li>
<li>恢复迁移</li>
<li>重新提交迁移</li>
<li>现实迁移历史和状态<a id="more"></a>
下面我简单用一下,至于更复杂的应用会在后期的更新中补充掉</li>
</ul>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>先看下帮助<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd thesaurus</div><div class="line">$ php yii migrate -h</div></pre></td></tr></table></figure></p>
<p>最重要的是下面这段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- migrate/create        Creates a new migration.</div><div class="line">- migrate/down          Downgrades the application by reverting old migrations.</div><div class="line">- migrate/history       Displays the migration history.</div><div class="line">- migrate/mark          Modifies the migration history to the specified version.</div><div class="line">- migrate/new           Displays the un-applied new migrations.</div><div class="line">- migrate/redo          Redoes the last few migrations.</div><div class="line">- migrate/to            Upgrades or downgrades till the specified version.</div><div class="line">- migrate/up (default)  Upgrades the application by applying new migrations.</div></pre></td></tr></table></figure></p>
<p>出于好奇心,我们先<em>create</em>一个表试试看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ php yii migrate/create create_terms_table</div></pre></td></tr></table></figure></p>
<p>提示创建一个新的迁移文件,输入<em>yes</em>看到<em>New migration created successfully.</em>表示成功<br>生成的文件在<em>/thesaurus/console/migrations/mxxxxxx_xxxxxx_create_terms_table.php</em>,打开编辑terms所需字段<br><img src="https://git.kancloud.cn/repos/cola_uncle/yii2/raw/master/image/screenshot_1489469726399.png?access-token=de29ccf9007bea655d8be6a078533ddd" alt=""></p>
<p>我这里添加了<em>name</em>和<em>create_at</em>,<em>update_at</em>字段,上边的属性各位估计也能看明白,下边执行迁移<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ php yii migrate</div></pre></td></tr></table></figure></p>
<p>安装提示输入<em>yes</em>,看到<em>Migrated up successfully</em>说明成功,通过数据库工具<em>Navicat Premium</em>可以看到数据库中多了三个表<em>migration</em>,<em>terms</em>,<em>user</em>,其中<em>migration</em>是用来记录迁移历史记录的,<em>user</em>是项目初始化中自带的(也就是你刚刚登陆不成功那个<em>user</em>表),<em>terms</em>当然使我们自己创建的<br>剩下的命令就不做过多演示了,记住几个比较常用,完全无压力<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- migrate/create        创建新的迁移.</div><div class="line">- migrate/down          恢复上一个迁移.</div><div class="line">- migrate/history       显示迁移历史和状态.</div><div class="line">- migrate               提交迁移</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;在开发和维护一个数据库驱动的应用程序时,数据库的结构会随代码的改变而改变. Yii 提供了一个 数据库迁移功,该功能可以记录数据库的变化, 以便使数据库和源代码一起受版本控制.&lt;br&gt;Yii 提供了一整套的迁移命令行工具，通过这些工具你可以:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建新的迁移&lt;/li&gt;
&lt;li&gt;提交迁移&lt;/li&gt;
&lt;li&gt;恢复迁移&lt;/li&gt;
&lt;li&gt;重新提交迁移&lt;/li&gt;
&lt;li&gt;现实迁移历史和状态
    
    </summary>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 配置数据库连接</title>
    <link href="http://www.iooeo.com/2017/03/31/Yii2%20%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <id>http://www.iooeo.com/2017/03/31/Yii2 配置数据库连接/</id>
    <published>2017-03-31T03:52:00.000Z</published>
    <updated>2017-07-04T08:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>本人习惯将数据库连接信息,及一些安全性信息写到系统的环境变量里</p>
<ul>
<li>一是代码中没有明文的数据库账号密码等一些安全敏感性信息</li>
<li>二是逼格比较高</li>
<li>三是代码统一,配置好终身所有项目受用,没必要再去管开发环境生产环境配置啥的</li>
</ul>
<p>本人终端为macOS一般环境变量配置在<em>.bash_profile</em>,Linux一般在<em>/etc/profile</em>,配置格式如下<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ export DB_TYPE=mysql</div><div class="line">$ export DB_HOST=192.168.0.3</div><div class="line">$ export DB_USER=root</div><div class="line">$ ....</div></pre></td></tr></table></figure></p>
<p>基于以上,项目中配置信息都在<em>mian.php</em>文件中配置,至于后端和前端的不同配置,就在<em>backend/config/main.php</em>和<em>frontend/config/main.php</em>中配置<br>配置好以后点击<em>local.thef.com</em>的Login,账号密码随便输入,点击Login,报错了?!那就对了,错误信息是说<em>thesaurus</em>数据库中没有<em>user</em>表,如果是其他错误那就不正常了,这一节就到此了,下一节简单的讲一下Yii2的数据库迁移.<br><img src="https://git.kancloud.cn/repos/cola_uncle/yii2/raw/master/image/screenshot_1489459270923.png?access-token=de29ccf9007bea655d8be6a078533ddd" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人习惯将数据库连接信息,及一些安全性信息写到系统的环境变量里&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一是代码中没有明文的数据库账号密码等一些安全敏感性信息&lt;/li&gt;
&lt;li&gt;二是逼格比较高&lt;/li&gt;
&lt;li&gt;三是代码统一,配置好终身所有项目受用,没必要再去管开发环境生产环境配置啥的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本人终端为macOS一般环境变量配置在&lt;em&gt;.bash_profile&lt;/em&gt;,Linux一般在&lt;em&gt;/etc/profile&lt;/em&gt;,配置格式如下&lt;br&gt;
    
    </summary>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 创建应用</title>
    <link href="http://www.iooeo.com/2017/03/31/Yii2%20%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8/"/>
    <id>http://www.iooeo.com/2017/03/31/Yii2 创建应用/</id>
    <published>2017-03-31T03:43:00.000Z</published>
    <updated>2017-07-07T07:14:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>macOS 10.12.3</li>
<li>php version: 5.6.28</li>
<li>nginx version: nginx/1.8.0</li>
<li>mysql version: 5.7.16</li>
<li>composer version: 1.3.2<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2>开发环境安装,这里就不做太多讲解,如有需要请移至本人博客<a href="http://iooeo.com" target="_blank" rel="external">Ewan’s Blog</a>.<br>composer 安装以及更换国内镜像请移至<a href="https://pkg.phpcomposer.com/" target="_blank" rel="external">Packagist / Composer</a></li>
</ul>
<p>切换到一个可通过 Web 访问的目录，执行如下命令即可安装 Yii ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ composer global require &quot;fxp/composer-asset-plugin:^1.2.0&quot;</div><div class="line">$ composer create-project yiisoft/yii2-app-advanced thesaurus</div></pre></td></tr></table></figure></p>
<p>本文全篇以高级的应用程序模板为基础,thesaurus 为实例项目名称.(安装的过程时间稍长,可以出去抽根烟)<br>安装好以后,初始化项目程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd thesaurus/</div><div class="line">$ php init</div></pre></td></tr></table></figure></p>
<p>选择 0(Development)<br>输入 yes 即可<br>配置Nginx web访问服务,这里就不做多解释</p>
<ul>
<li><em>local.theb.com</em> (后端服务访问URL)</li>
<li><em>local.thef.com</em>  (前端服务访问URL)</li>
</ul>
<p>配置好以后记得添加本地hosts和重启Nginx或者Apache<br>以上操作完成以后,通过浏览器访问<em>local.theb.com</em>和<em>local.thef.com</em> 显示一下即为安装成功<br><img src="http://ogpq2zwg5.bkt.clouddn.com/cee144a9319c9e6dcabf5b3d9884c938_1872x1016.png" alt=""><br><img src="http://ogpq2zwg5.bkt.clouddn.com/58c04d10026135a15f47ca7df30438ed_1873x1017.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;macOS 10.12.3&lt;/li&gt;
&lt;li&gt;php version: 5.6.28&lt;/li&gt;
&lt;li&gt;nginx version: nginx/1.8.0&lt;/li&gt;
&lt;li&gt;mysql version: 5.7.16&lt;/li&gt;
&lt;li&gt;composer version: 1.3.2
    
    </summary>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>互联网协议总结(二)</title>
    <link href="http://www.iooeo.com/2016/12/14/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93-%E4%BA%8C/"/>
    <id>http://www.iooeo.com/2016/12/14/互联网协议总结-二/</id>
    <published>2016-12-14T06:36:09.000Z</published>
    <updated>2016-12-14T06:36:09.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>互联网协议总结(一)</title>
    <link href="http://www.iooeo.com/2016/12/13/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93-%E4%B8%80/"/>
    <id>http://www.iooeo.com/2016/12/13/互联网协议总结-一/</id>
    <published>2016-12-13T03:41:29.000Z</published>
    <updated>2016-12-14T06:37:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="互联网协议入门"><a href="#互联网协议入门" class="headerlink" title="互联网协议入门"></a>互联网协议入门</h2><p>每天重复搬砖的动作,发现很多底层的基础只是都有点忘了…补一下喽,这里参照<a href="http://www.ruanyifeng.com" target="_blank" rel="external">阮一峰</a>的博客梳理一下<br>互联网的核心是一系列的协议,总称为”互联网协议”(Internet Protocol Suite).它们对电脑如何连接和组网,做出了详尽的规定.理解了这些协议,就理解了互联网的原理.<br><a id="more"></a></p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1.1 五层模型</p>
<blockquote>
<p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。<br>用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。<br>如何分层有不同的模型，有的模型分七层，有的分四层。个人觉得把互联网分成五层，比较容易解释。<br><img src="http://image.beekka.com/blog/201205/bg2012052902.png" alt="互联网实现-h250"><br>如图所示,越往下面的层,越靠近硬件;越往上面的层,越靠近用户.</p>
</blockquote>
<p>1.2 层与协议</p>
<blockquote>
<p>每一层都是为了完成一种功能.为了实现这些功能,就需要大家都遵守共同的规则.<br>大家都遵守的规则,就叫做”协议”(protocol).<br>互联网的每一层都定义了很多协议.这些协议的总称,就叫做”互联网协议”(Internet Protocol Suite).它是互联网的核心.</p>
</blockquote>
<h3 id="实体层-Physical-Layer"><a href="#实体层-Physical-Layer" class="headerlink" title="实体层 Physical Layer"></a>实体层 Physical Layer</h3><blockquote>
<p>从最底下的一层开始.<br>计算机要组网,当然是先把电脑连接起来,可以用光缆,电缆,双绞线,无线电波等方式.<br><img src="http://image.beekka.com/blog/201205/bg2012052903.png" alt="计算机组网"><br>这就叫做”实体层”,他就是把电脑连接起来的物理手段.它主要规定了网络的一些电气特性,作用是负责传送0和1的电信号.</p>
</blockquote>
<h3 id="链接层-Link-Layer"><a href="#链接层-Link-Layer" class="headerlink" title="链接层 Link Layer"></a>链接层 Link Layer</h3><p>3.1 定义</p>
<blockquote>
<p>单纯的0和1没有任何意义,必须规定解读方式:多少个电信号算一组?每个信号位有什么意义?<br>这就是”链接层”的功能,它在”实体层”的上方,确定了0和1的分组方式.</p>
</blockquote>
<p>3.2 以太网协议</p>
<blockquote>
<p>早期的时候,每家公司都有自己的电信号分组方式.逐渐的一种叫做”以太网”(Ethernet)的协议,占据了主导地位.<br>以太网规定,一组电信号构成一个数据包,叫做”帧”(Frame).每一帧分成两个部分:标头(head)和数据(data).<br><img src="http://image.beekka.com/blog/201205/bg2012052904.png" alt="帧"><br>“标头”包含数据包的一些说明项,比如发送者,接受者,数据类型等等;”数据”则是数据包的具体内容.<br>“标头”的长度,固定为18字节.”数据”长度,最短为46字节,最长为1500字节.因此,整个”帧”最短为64字节,最长为1518字节,如果数据很长,就必须分割成多个”帧”进行发送.</p>
</blockquote>
<p>3.3 MAC地址</p>
<blockquote>
<p>上面提到，以太网数据包的”标头”,包含了发送者和接受者的信息,那么,发送者和接受者是如何标识呢?<br>以太网规定,连入网络的所有设备,都必须具有”网卡”接口.数据包必须是从一块网卡,传送到另一块网卡.网卡的地址,就是数据包的发送地址和接收地址,这叫做MAC地址.<br><img src="http://image.beekka.com/blog/201205/bg2012052905.jpg" alt="网卡"><br>每块网卡出厂的时候,都有一个全世界独一无二的MAC地址,长度是48个二进制位,通常用12个十六进制数表示.<br><img src="http://image.beekka.com/blog/201205/bg2012052906.png" alt="网卡"><br>前6个十六进制数是厂商编号,后6个是该厂商的网卡流水号.有了MAC地址,就可以定位网卡和数据包的路径了.</p>
</blockquote>
<p>3.4 广播</p>
<blockquote>
<p>定义地址只是第一步,后面还有更多的步骤.<br>首先,一块网卡怎么会知道另一块网卡的MAC地址?<br>回答是有一种ARP协议,可以解决这个问题.这个留到后面介绍,这里只需要知道,以太网数据包必须知道接收方的MAC地址,然后才能发送.<br>其次,就算有了MAC地址,系统怎样才能把数据包准确的发送到接收方?<br>回答是以太网采用了一种很”原始”的方式,它不是把数据包准确送到接收方,而是向本网络内所有计算机发送,让每台计算机自己判断,是否为接受方.<br><img src="http://image.beekka.com/blog/201205/bg2012052907.png" alt="数据包发送"><br>上图中,1号计算机向2号计算机发送一个数据包,同一个子网络的3号,4号,5号计算机都会收到这个包.它们读取到这个包的”标头”,找到接收方的MAC地址,然后与自身的MAC地址相比较,如果两者相同,就接收这个包,做进一步处理,否则就丢弃这个包.这种发送方式就叫做”广播”(broadcasting).<br>有了这个数据包的定义,网卡的MAC地址,广播的发送方式,”连接层”就可以在多台计算机之间传送数据了.</p>
</blockquote>
<h3 id="网络层-Network-Layer"><a href="#网络层-Network-Layer" class="headerlink" title="网络层 Network Layer"></a>网络层 Network Layer</h3><p>4.1 网络层的由来</p>
<blockquote>
<p>以太网协议,依靠MAC地址发送数据.理论上,单单依靠MAC地址,上海的网卡就可以找到洛杉矶的网卡了,技术上是可以实现的.<br>但是,这样做有一个重大的缺点,以太网采用广播的发送方式发送数据包,所有成员人手一”包”,不仅效率低,而且局限在发送者所在的子网络.这就是说,如果两台计算机不在同一个子网络,广播是传不过去的.这种设计是合理的,否则互联网上每一台计算机都会收到所有的”包”,那会引起灾难.<br>互联网是无数子网络共同组成的一个巨型网络,很难想象上海和洛杉矶的电脑会在同一个子网络,这几乎是不可能的.<br><img src="http://image.beekka.com/blog/201205/bg2012052914.png" alt="Internet"><br>因此,必须找到一种方法,能够区分哪些MAC地址属于同一个子网络,哪些不是.如果是同一子网络,就采用广播的方式发送,否则就采用”路由”的方式发送.(“路由”的意思,是指如何向不同的子网络发送数据包,这是一个很大的主题,本文不涉及.)遗憾的是,MAC地址本身无法做到这一点,它只与厂商有关,与所出网络无关.<br>这就导致了”网络层”的诞生,它的作用是引进一套新的地址,使得我们能区分不同的计算机是否属于同一个自网络.这套地址就叫做”网络地址”,简称”网址”.<br>于是,”网络层”出现以后,每台计算机有了两种地址,一种是MAC地址,另一种是网络地址.两种地址之间没有任何联系,MAC地址是绑定在网卡上的,网络地址则是管理员分配的,它们只是随机组合在一起.<br>网络地址帮助我们确定计算机所在的子网络,MAC地址则将数据包发送到该子网络中的没押镖网卡.因此,从逻辑上可以推断,必定是先处理网络地址,然后再处理MAC地址.</p>
</blockquote>
<p>4.2 IP协议</p>
<blockquote>
<p>规定网络地址的协议,叫做IP协议.它所定义的地址,就被称为IP地址.<br>目前,广泛采用的IP协议第四版,简称IPv4.这个版本规定,网络地址由32个二进制位组成.<br><img src="http://image.beekka.com/blog/201205/bg2012052908.png" alt="IP"><br>习惯上,我们分成4段的十进制数表示IP地址,从0.0.0.0一直到255.255.255.255.<br>互联网上每一台计算机,都会分配到一个IP地址.这个地址分成两部分,前一部分代表网络,后一部分代表主机.比如,IP地址172.16.254.1,这是一个32位的地址,假定它的网络部分是前24位(172.16.254),那么主机部分就是后8位(最后一个1).处于同一子网络的计算机,它们的IP地址的网络部分必定是相同的,也就是说172.16.254.2应该与172.16.254.1处于同一个子网络.<br>但是,问题在于单单从IP地址,我们无法判断网络部分.还是以172.16.254.1为例,它的网络部分,到底是前24位,还是前16位,甚至是前28位,从IP地址上是看不出来的.<br>那么.怎样才能从IP地址,判断两台计算机是否属于同一个子网络呐?这就是要用到另一个参数”子网掩码”(subnet mask).<br>所谓”子网掩码”,就是表示子网络特征的一个参数.它在形式上等同于IP地址,也就是一个32位的二进制数字,他的网络部分全部为1,主机部分全部为0.比如,IP地址172.16.254.1,如果已知网络部分是前24位,主机部分是后8位,那么子网掩码就是11111111.11111111.11111111.00000000,写成十进制就是255.255.255.0<br>知道”子网掩码”,我们就能判断,任意两个IP地址是否处在同一个子网络.方法是将两个IP地址与子网掩码分别进行AND运算(两个数位都为1,运行结果为1,否则为0),然后比较结果是否相同,如果是的话,就表明它们在同一个子网络中,否则就不是.<br>比如,一直IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0,请问它们是否在同一个子网络?两者与子网掩码分别进行AND运算,结果都是172.16.254.0,因此它们在同一个子网络.<br>总结一下,IP协议的作用主要有两个,一个是为每一台计算机分配IP地址,另一个是确定哪些IP地址在同一个子网络.</p>
</blockquote>
<p>4.3 IP数据包</p>
<blockquote>
<p>根据IP协议发送的数据,就叫做IP数据包.不难想象,其中必定包括IP信息.<br>但是前面说过,以太网数据包值包含MAC地址,并没有IP地址的栏位.那么是否需要修改数据包定义,再添加一个栏位呐?<br>回答是不需要,我们可以把IP数据包直接放进意外网数据包的”数据”部分,因此完全不用修改以太网的规格.这就是互联网分层结构的好处:上层的变动完全不涉及下层的结构.<br>具体来说,IP数据包也分为”标头”和”数据”两部分.<br><img src="http://image.beekka.com/blog/201205/bg2012052909.png" alt="IP数据包"><br>“标头”部分主要包括版本,长度,IP地址等信息,”数据”部分则是IP数据包的具体内容,它放进以太网数据包后,以太网数据包就变成了下面这样.<br><img src="http://image.beekka.com/blog/201205/bg2012052910.png" alt="以太网数据包"><br>IP数据包的”标头”部分的长度为20~60字节,真个数据包的总长度为65535字节.因此,理论上,一个IP数据包的”数据”部分,最长为65515字节.前面说过,以太网数据包的”数据”部分,最长只有1500字节,因此,IP数据包超过了1500字节,它就需要分割成几个以太网数据包,发开发送了.</p>
</blockquote>
<p>4.4 ARP协议</p>
<blockquote>
<p>关于”网络层”,还有最后一点需要说明.<br>因为IP数据包是放在以太网数据包里发送的,所以我们必须同时知道两个地址,一个是对方的MAC地址,另一个是对方的IP地址.通常情况下,对方的IP地址是已知的(后文会解释),但是我们不知道它的MAC地址.<br>所以,我们需要一种机制,能够从IP地址得到MAC地址.<br>这里又可以分成两种情况.第一种情况,如果两台主机不在同一个子网络,那么事实上没有办法得到对方的MAC地址,只能把数据包传送到两个子网络连接处的”网关”(gateway),让网关去处理.<br>第二种情况,如果两台主机在同一个子网络,那么我们可以用ARP协议,得到对方的MAC地址.ARP协议也是发出一个数据包(包含在以太网数据包中),其中包含它所要查询主机的IP地址,在对方的MAC地址这一栏,填的是FF:FF:FF:FF:FF:FF,表示这是一个”广播”地址.它所在子网络的每一台主机,都会收到这个数据包,从中取出IP地址,与自身的IP地址进行比较.如果两者相同,都做出回复,向对方报告自己的MAC地址,否则就丢弃这个包.<br>总之,有了ARP协议之后,我们就可以得到同一个子网络内的主机MAC地址,可以把数据包发送到任意一台主机之上了.</p>
</blockquote>
<h3 id="传输层-Transport-Layer"><a href="#传输层-Transport-Layer" class="headerlink" title="传输层 Transport Layer"></a>传输层 Transport Layer</h3><p>5.1 传输层的由来</p>
<blockquote>
<p>有了MAC地址和IP地址,我们已经可以在互联网上任意两台主机上建立通信.<br>接下来的问题是,同一台主机上有许多程序都需要用到网络,比如,你一边浏览网页,一边与朋友在线聊天.当一个数据包从互联网上发来的时候,你怎么知道,它是表示网页的内容,还是表示在线聊天的内容?<br>也就是说,我们还需要一个参数,表示这个数据包到底供哪个程序(进程)使用.这个参数就叫做”端口”(port)，它其实是每一个使用网卡的程序的编号.每个数据包都发到主机的特定端口,所以不同的程序就能取到自己所需要的数据.<br>“端口”是0到65535之间的一个整数,正好16个二进制位.0到1023的端口被系统占用,用户只能选用大于1023的端口.不管是浏览网页还是在线聊天,应用程序会随机选用一个端口,然后与服务器的相应端口联系.<br>“传输层”的功能,就是建立”端口到端口”的通信.相比之下,”网络层”的功能是建立”主机到主机”的通信.只要确定主机和端口,我们就能实现程序之间的交流.因此,Unix系统就把主机+端口,叫做”套接字”(socket).有了它,就可以进行网络应用程序开发了.</p>
</blockquote>
<p>5.2 UDP协议</p>
<blockquote>
<p>现在,我们必须在数据包中加入端口信息,这就需要新的协议.最简单的实现叫做UDP协议,它的格式几乎就是在数据前面,加上端口号.<br>UDP数据包也,是由”标头”和”数据”两部分组成.<br><img src="http://image.beekka.com/blog/201205/bg2012052911.png" alt="UDP数据包"><br>“标头”部分主要定义了发出端口和接收端口,”数据”部分就是具体的内容.然后,把整个UDP数据包放入IP数据包的”数据”部分,而前面说过,IP数据包又是放在以太网数据包之中的,所以整个以太网数据包现在变成了下面这样:<br><img src="http://image.beekka.com/blog/201205/bg2012052912.png" alt="以太网数据包"><br>UDP数据包非常简单,”标头”部分一共只有8个字节,总长度不超过65535字节,正好放进一个IP数据包.</p>
</blockquote>
<p>5.3 TCP协议</p>
<blockquote>
<p>UDP协议的优点是比较简单,容易实现,但是缺点是可靠性较差,一旦数据包发出,无法知道对方是否收到.<br>为了解决这个问题,提高网络可靠性,TCP协议就诞生了.这个协议非常复杂,但可以近似认为,它就是有确认机制的UDP协议,每发出一个数据包都要求确认.如果有一个数据包遗失,就收不到确认,发出方就知道有必要重发这个数据包了.<br>因此,TCP协议能够确保数据不会遗失.它的缺点是过程复杂,实现困难,消耗较多的资源.<br>TCP数据包和UDP数据包一样,都是内嵌在IP数据包的”数据”部分.TCP数据包没有长度限制,理论上可以无限长,但是为了保证网络的效率,通常TCP数据包的长度不会超过IP数据包的长度,以确保单个TCP数据包不必再分割.</p>
</blockquote>
<h3 id="应用层-Application-Layer"><a href="#应用层-Application-Layer" class="headerlink" title="应用层 Application Layer"></a>应用层 Application Layer</h3><blockquote>
<p>应用程序收到”传输层”的数据,接下来就要进行解读.由于互联网是开放架构,数据来源五花八门,必须事先规定好格式,否则根本无法解读.<br>“应用层”的作用,就是规定应用程序的数据格式.<br>举例来说,TCP协议可以为各种各样的程序传递数据,比如Email,WWW,FTP等等.那么,必须有不同协议规定电子邮件,网页,FTP数据的格式.这些应用程序协议就构成了”应用层”.<br>这是最高的一层,直接面对用户.它的数据就放在TCP数据包的”数据”部分.因此,现在的以太网的数据包就变成下面这样.<br><img src="http://image.beekka.com/blog/201205/bg2012052913.png" alt="以太网数据包"><br>至此,整个互联网的五层结构,自下而上全部讲完了.这是从系统的角度,解释互联网是如何构成的.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;互联网协议入门&quot;&gt;&lt;a href=&quot;#互联网协议入门&quot; class=&quot;headerlink&quot; title=&quot;互联网协议入门&quot;&gt;&lt;/a&gt;互联网协议入门&lt;/h2&gt;&lt;p&gt;每天重复搬砖的动作,发现很多底层的基础只是都有点忘了…补一下喽,这里参照&lt;a href=&quot;http://www.ruanyifeng.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰&lt;/a&gt;的博客梳理一下&lt;br&gt;互联网的核心是一系列的协议,总称为”互联网协议”(Internet Protocol Suite).它们对电脑如何连接和组网,做出了详尽的规定.理解了这些协议,就理解了互联网的原理.&lt;br&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://www.iooeo.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="网络" scheme="http://www.iooeo.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="计算机" scheme="http://www.iooeo.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="通讯协议" scheme="http://www.iooeo.com/tags/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>git删除已提交的文件或文件夹</title>
    <link href="http://www.iooeo.com/2016/12/12/git%E5%88%A0%E9%99%A4%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://www.iooeo.com/2016/12/12/git删除已提交的文件或文件夹/</id>
    <published>2016-12-12T06:50:51.000Z</published>
    <updated>2016-12-12T07:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>今个写脚本测试的时候不小心将记录数据的文件提交上去了,研究了一下git忽略已提交的文件或者文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git rm --cached logs/put_file.log</div><div class="line">$ vi .gitignore</div><div class="line"># .gitignore添加要忽略的文件</div><div class="line">$ logs/put_file.log</div><div class="line">$ git commit -m &quot;We really don&apos;t want Git to track this anymore!&quot;</div></pre></td></tr></table></figure>
<p>这样就可以完成忽略已提交的文件或者文件夹了<br>PS:文件夹的话使用<code>logs/*</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今个写脚本测试的时候不小心将记录数据的文件提交上去了,研究了一下git忽略已提交的文件或者文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
      <category term="Git" scheme="http://www.iooeo.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.iooeo.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>AES加密解密</title>
    <link href="http://www.iooeo.com/2016/12/06/AES%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    <id>http://www.iooeo.com/2016/12/06/AES加密解密/</id>
    <published>2016-12-06T01:23:27.000Z</published>
    <updated>2016-12-06T01:43:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AES-（高级加密标准"><a href="#AES-（高级加密标准" class="headerlink" title="AES （高级加密标准)"></a>AES （高级加密标准)</h1><p>  高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。<br>   说下PHP的用法~~<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Security &#123;</div><div class="line">	public static function encrypt($input, $key) &#123;</div><div class="line">		$size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB);</div><div class="line">		$input = Security::pkcs5_pad($input, $size);</div><div class="line">		$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128, &apos;&apos;, MCRYPT_MODE_ECB, &apos;&apos;);</div><div class="line">		$iv = mcrypt_create_iv (mcrypt_enc_get_iv_size($td), MCRYPT_RAND); </div><div class="line">		mcrypt_generic_init($td, $key, $iv); </div><div class="line">		$data = mcrypt_generic($td, $input); </div><div class="line">		mcrypt_generic_deinit($td); </div><div class="line">		mcrypt_module_close($td); </div><div class="line">		$data = base64_encode($data); </div><div class="line">		return $data; </div><div class="line">	&#125; </div><div class="line"></div><div class="line">	private static function pkcs5_pad ($text, $blocksize) &#123; </div><div class="line">		$pad = $blocksize - (strlen($text) % $blocksize);</div><div class="line">		return $text . str_repeat(chr($pad), $pad);</div><div class="line">	&#125; </div><div class="line"></div><div class="line">	public static function decrypt($sStr, $sKey) &#123;</div><div class="line">		$decrypted= mcrypt_decrypt(</div><div class="line">			MCRYPT_RIJNDAEL_128,</div><div class="line">			$sKey, </div><div class="line">			base64_decode($sStr), </div><div class="line">			MCRYPT_MODE_ECB</div><div class="line">		);</div><div class="line">		$dec_s = strlen($decrypted); </div><div class="line">		$padding = ord($decrypted[$dec_s-1]); </div><div class="line">		$decrypted = substr($decrypted, 0, -$padding);</div><div class="line">		return $decrypted;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">require_once(&apos;./security.php&apos;);</div><div class="line"></div><div class="line">$value = &quot;example&quot;;</div><div class="line">$key = &quot;1234567891234567&quot;; //16 Character Key</div><div class="line">echo Security::encrypt($value, $key);</div><div class="line">echo Security::decrypt(Security::encrypt($value, $key), $key);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AES-（高级加密标准&quot;&gt;&lt;a href=&quot;#AES-（高级加密标准&quot; class=&quot;headerlink&quot; title=&quot;AES （高级加密标准)&quot;&gt;&lt;/a&gt;AES （高级加密标准)&lt;/h1&gt;&lt;p&gt;  高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。&lt;br&gt;   说下PHP的用法~~&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 深入浅出</title>
    <link href="http://www.iooeo.com/2016/11/23/MySQL-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <id>http://www.iooeo.com/2016/11/23/MySQL-深入浅出/</id>
    <published>2016-11-23T04:41:54.000Z</published>
    <updated>2016-11-23T04:42:12.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="MySQL" scheme="http://www.iooeo.com/categories/MySQL/"/>
    
    
      <category term="Linux" scheme="http://www.iooeo.com/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://www.iooeo.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Firing！！！</title>
    <link href="http://www.iooeo.com/2016/11/17/Firing%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <id>http://www.iooeo.com/2016/11/17/Firing！！！/</id>
    <published>2016-11-17T08:06:39.000Z</published>
    <updated>2016-11-17T08:40:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过两天的奋战，<code>Ewan&#39;s Blog</code> 终于与大家见面了。目前网站定位方向为技术性博客，可能稍后会有些栏目的调整，期待大家的关注。</p>
<p>之前也有做过自己的博客网站,经历了服务器到期,域名续费,赶上有段时间工作调整没时间整理,导致博客更新中断.而后一直有新建博客的想法,说到这个特别的感谢一下<a href="http://www.liuxiaojia.cc/" target="_blank" rel="external">胖佳</a> 在网站的搭建过程中的先锋精神和技术指导.还要感谢<a href="http://www.pythondev.org" target="_blank" rel="external">jarvan君</a>和<a href="http://old.tumiaoya.com/" target="_blank" rel="external">小白</a>的技术指导,说句实在话jarvan君是我工作以来对我帮助最大的一位,之前一起住学校宿舍、一起在一家公司上班,生活中是个老大哥、工作中亦师亦友的这种关系令我享受在其中.当然上面提到胖佳和小白那两只货是我在北京性格上很合得来的哥们,为此哥几个一周撸五次串也不为过.</p>
<p>在北京学习的那几个月是我人生的一个转折点,更是我人生一个新的起点.</p>
<p><em>后续会陆续将之前整理的博客文章搬迁过来,也会发表一些新的文章出来供大家分享学习</em></p>
<h3 id="既然有了一个好的起点，我们就跟要努力向前冲，Firing，Firing！！！"><a href="#既然有了一个好的起点，我们就跟要努力向前冲，Firing，Firing！！！" class="headerlink" title="既然有了一个好的起点，我们就跟要努力向前冲，Firing，Firing！！！"></a>既然有了一个好的起点，我们就跟要努力向前冲，Firing，Firing！！！</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过两天的奋战，&lt;code&gt;Ewan&amp;#39;s Blog&lt;/code&gt; 终于与大家见面了。目前网站定位方向为技术性博客，可能稍后会有些栏目的调整，期待大家的关注。&lt;/p&gt;
&lt;p&gt;之前也有做过自己的博客网站,经历了服务器到期,域名续费,赶上有段时间工作调整没时间整理,导致博
    
    </summary>
    
      <category term="杂谈" scheme="http://www.iooeo.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="微语" scheme="http://www.iooeo.com/tags/%E5%BE%AE%E8%AF%AD/"/>
    
      <category term="胡侃" scheme="http://www.iooeo.com/tags/%E8%83%A1%E4%BE%83/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 存储例程</title>
    <link href="http://www.iooeo.com/2015/03/23/MySQL-%E5%AD%98%E5%82%A8%E4%BE%8B%E7%A8%8B/"/>
    <id>http://www.iooeo.com/2015/03/23/MySQL-存储例程/</id>
    <published>2015-03-23T04:07:59.000Z</published>
    <updated>2016-11-23T04:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>好高兴啊，Ewan学习进行时。mysql存储例程学习总结拿来共享喽。<br><a id="more"></a></p>
<ul>
<li><p>1.存储例程定义</p>
<blockquote>
<p>存储在数据库服务器中的一组sql语句，通过在查询中调用一个指定的名称来执行这些sql语句命令。mysql存储例程实际上包含了存储过程和存储函数，他们被统称为存储例程。<br>存储过程：存储过程支持select,insert,update和delete等sql命令的执行，还可以设置能在程序外引用的参数。<br>存储函数：只支持select命令的执行，只接受输入参数，必须返回且只返回一个值，此外还可以旧爱那个存储函数直接嵌套到sql命令中。</p>
</blockquote>
</li>
<li><p>2.为什么使用存储例程</p>
<blockquote>
<p>我们都知道应用程序分为两种，一种是基于桌面一种是基于web，它们都使用一个MYSQL数据库并完成很多相同的任务。而这两种应用程序可能带来不易维护和易遭sql语句注入的弊端，针对这些难题，存储例程的数据库特性成为最常用的解决方案之一。</p>
</blockquote>
</li>
<li><p>3.存储例程优点</p>
<blockquote>
<p>1）一致性<br>2）高性能<br>3）安全性<br>4）架构</p>
</blockquote>
</li>
<li><p>4.存储过程基本语法<br><code>create procedure (过程名)［过程参数...］
begin
(内容，sql语句)
end</code></p>
<blockquote>
<p>调用：<br><code>set @要设置的参数值</code><br><code>call  参数名(@要设置的参数值)</code><br>从另一个例程中调用例程：<br><code>create procedure 进程名</code><br><code>begin</code><br><code>call 另一个进程名();</code><br><code>end</code><br>查看存储进程:<br><code>show procedure status;</code><br>一可以查看某个存储进程的详细:<br><code>show procedure status like &#39;变量名&#39;\G;</code><br>查看进程的创建语法:<br><code>show create procedure 进程名;</code><br>修改存储进程：<br><code>alter procedure 进程名 .....</code><br>删除存储进程：<br><code>drop procedure 进程名;</code><br>是不是很简单，下面来详细分解一下语法的具体参数:<br>存储过程参数用在存储过程的定，共有三种类型in,out,inout如下：create procedure (过程名)［in/out/inout 参数名 数据类型］<br>in：为默认值，使用该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回。<br>out：使用该参数的之的值在存储过程内部被改变，并返回。<br>inout:使用该参数的值，调用时指定，并且可被改变并返回。</p>
</blockquote>
</li>
<li><p>5.声明和设置变量</p>
<blockquote>
<p>声明变量：<br>这里使用到了declare，如下：<br><code>declare 变量名 变量类型;</code><br>设置变量：<br><code>set 变量名=值;</code><br>这里做下延伸：<br>在mysql客户端使用用户变量，如下：<br><code>select &#39;hello world!&#39; into @z;
set @x=&#39;hello world!&#39;;
set @c=1+1;</code><br>执行：select …;<br>这里要注意：<br>1）变量名一般以@开头<br>2）滥用用户变量会导致程序难以理解和管理</p>
</blockquote>
</li>
<li><p>6.begin …end</p>
<blockquote>
<p>创建多语句进程时，将语句放在begin end 中间。</p>
</blockquote>
</li>
<li><p>7.条件(条件语句这里不做太多解释）<br><code>if .....then ....</code><br><code>elseif ...then ....</code><br><code>end if;</code><br><code>case</code><br><code>when .... then  :</code><br><code>.....;</code><br><code>when .... then  :</code><br><code>.....;</code><br><code>end case;</code><br><code>while.....end while;</code><br><code>repeat ....end repeat;</code><br><code>loop .....end loop;</code></p>
<blockquote>
<p>repeat是在执行操作后检查结果，而while是在执行前进行检查。<br>oop循环不需要初始条件，这点和while 循环相似，同时和repeat循环一样不需要结束条件, leave语句的意义是离开循环。<br>lables标号可以用在begin repeat while 或者loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。<br>iterate迭代,为了一些需要重复执行一组语句的任务。<br>通过引用复合语句的标号,来从新开始复合语句。<br>leave 在得到变量的值或特定任务的结果之后，可能希望通过leave命令立即退出循环或begin…end。</p>
</blockquote>
</li>
<li><p>8.存储函数</p>
<blockquote>
<p>字符串类：<br><code>charset(str) //返回字串字符集</code><br><code>concat (string2 [,... ]) //连接字串</code><br><code>instr (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0</code><br><code>lcase(string2 ) //转换成小写</code><br><code>left (string2 ,length ) //从string2中的左边起取length个字符</code><br><code>length (string ) //string长度</code><br><code>load_file(file_name ) //从文件读取内容</code><br><code>locate(substring , string [,start_position ] ) 同INSTR,但可指定开始位置</code><br><code>lpad(string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length</code><br><code>ltrim(string2 ) //去除前端空格</code><br><code>repeat(string2 ,count ) //重复count次</code><br><code>replace(str ,search_str ,replace_str ) //在str中用replace_str替换search_str</code><br><code>rpad(string2 ,length ,pad) //在str后用pad补充,直到长度为length</code><br><code>rtrim(string2 ) //去除后端空格</code><br><code>strcmp (string1 ,string2 ) //逐字符比较两字串大小</code><br><code>substring (str , position [,length ]) //从str的position开始,取length个字符 注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1</code><br><code>trim([[BOTH|LEADING|TRAILING] [padding] FROM]string2) //去除指定位置的指定字符</code><br><code>ucase(string2 ) //转换成大写</code><br><code>right(string2,length) //取string2最后length个字符</code><br><code>space(count) //生成count个空格</code><br>数学类<br><code>ABS (number2 ) //绝对值</code><br><code>BIN (decimal_number ) //十进制转二进制</code><br><code>CEILING (number2 ) //向上取整</code><br><code>CONV(number2,from_base,to_base) //进制转换</code><br><code>FLOOR (number2 ) //向下取整</code><br><code>FORMAT (number,decimal_places ) //保留小数位数</code><br><code>HEX (DecimalNumber ) //转十六进制 注：HEX()中可传入字符串，则返回其ASC-11码，如HEX(&#39;DEF&#39;)返回4142143 也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19</code><br><code>LEAST (number , number2 [,..]) //求最小值</code><br><code>MOD (numerator ,denominator ) //求余</code><br><code>POWER (number ,power ) //求指数</code><br><code>RAND([seed]) //随机数</code><br><code>ROUND (number [,decimals ]) //四舍五入,decimals为小数位数]</code><br>日期时间类<br><code>ADDTIME (date2 ,time_interval ) //将time_interval加到date2</code><br><code>CONVERT_TZ (datetime2 ,fromTZ ,toTZ ) //转换时区</code><br><code>CURRENT_DATE ( ) //当前日期</code><br><code>CURRENT_TIME ( ) //当前时间</code><br><code>CURRENT_TIMESTAMP ( ) //当前时间戳</code><br><code>DATE (datetime ) //返回datetime的日期部分</code><br><code>DATE_ADD (date2 , INTERVAL d_value d_type ) //在date2中加上日期或时间</code><br><code>DATE_FORMAT (datetime ,FormatCodes ) //使用formatcodes格式显示datetime</code><br><code>DATE_SUB (date2 , INTERVAL d_value d_type ) //在date2上减去一个时间</code><br><code>DATEDIFF (date1 ,date2 ) //两个日期差</code><br><code>DAY (date ) //返回日期的天</code><br><code>DAYNAME (date ) //英文星期</code><br><code>DAYOFWEEK (date ) //星期(1-7) ,1为星期天</code><br><code>DAYOFYEAR (date ) //一年中的第几天</code><br><code>EXTRACT (interval_name FROM date ) //从date中提取日期的指定部分</code><br><code>MAKEDATE (year ,day ) //给出年及年中的第几天,生成日期串</code><br><code>MAKETIME (hour ,minute ,second ) //生成时间串</code><br><code>MONTHNAME (date ) //英文月份名</code><br><code>NOW ( ) //当前时间</code><br><code>SEC_TO_TIME (seconds ) //秒数转成时间</code><br><code>STR_TO_DATE (string ,format ) //字串转成时间,以format格式显示</code><br><code>TIMEDIFF (datetime1 ,datetime2 ) //两个时间差</code><br><code>TIME_TO_SEC (time ) //时间转秒数]</code><br><code>WEEK (date_time [,start_of_week ]) //第几周</code><br><code>YEAR (datetime ) //年份</code><br><code>DAYOFMONTH(datetime) //月的第几天</code><br><code>HOUR(datetime) //小时</code></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好高兴啊，Ewan学习进行时。mysql存储例程学习总结拿来共享喽。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.iooeo.com/categories/MySQL/"/>
    
    
      <category term="Linux" scheme="http://www.iooeo.com/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://www.iooeo.com/tags/MySQL/"/>
    
  </entry>
  
</feed>

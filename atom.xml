<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ewan&#39;s Blog</title>
  <subtitle>Ewan&#39;s Blog | 杨依园技术博客 | 专注于PHP，涉及MySQL，Linux，Web，Nginx，Apache，Phalcon，Laravel，Redis，PostgreSql，Composer，Beanstalkd，Swoole</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iooeo.com/"/>
  <updated>2017-08-01T03:17:54.000Z</updated>
  <id>http://www.iooeo.com/</id>
  
  <author>
    <name>Ewan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>swoole Socket篇</title>
    <link href="http://www.iooeo.com/2017/08/01/swoole-Socket%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/08/01/swoole-Socket篇/</id>
    <published>2017-08-01T02:50:21.000Z</published>
    <updated>2017-08-01T03:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 PHP socket 的使用，我在之前的工作中使用过一些，自己也动手封装了关于 socket server 和 socket client 的类库，已共享到 GitHub 和码云上面：<br><a id="more"></a></p>
<ul>
<li><a href="https://github.com/yangyiyuan/simple-socket/tree/master" target="_blank" rel="external">Github PHP simple-socket</a></li>
<li><a href="https://gitee.com/ewan.yang/simple-socket" target="_blank" rel="external">Oschina PHP simple-socket</a></li>
</ul>
<p>当然也有更好的例如 workerman 之类的 socket 开源项目。<br>但 socket 对于大部分 phper还是比较陌生的一个词语，百度上给出大部分网文关键字都是<em>套接字</em>，比较抽象难懂一些。<br>socket即套接字，是用来与另一个进程进行跨网络通信的文件，说是“文件”，也很好理解哈，因为在linux中一切都可以理解为“文件”。比如客户端可以借助socket与服务器之间建立连接。你也可以把socket理解为一组函数库，它确实也就是一堆函数。<br>我们知道，常见的网络应用都是基于Client-Server模型的。即一个服务器进程和多个客户端进程组合而成，如果你还理解为是一台电脑对另一台电脑，可以回去把进程/线程一文再看看了。在Client-Server模型中，服务器管理某种资源，并且通过对它管理的资源进行操作来为客户端提供服务。<br>那Client和Server又如何实现通信呢？这就要利用socket一系列的函数实现了。<br>基于套接字接口的网络应用的描述，用下面这张图来理解就好。<br><img src="http://ogpq2zwg5.bkt.clouddn.com/217f4d714f-socket-client-server.png" alt="套接字接口的网络应用的描述"></p>
<p>大致可以描述为：</p>
<blockquote>
<p>服务器创建一个socket，绑定ip和端口，在该端口处进行监听，然后通过accept函数阻塞。<br>当有新的客户端连接进来时，server接收客户端数据并处理数据，然后返回给客户端，客户端关闭连接，server关闭该客户端，一次连接交互完成。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 PHP socket 的使用，我在之前的工作中使用过一些，自己也动手封装了关于 socket server 和 socket client 的类库，已共享到 GitHub 和码云上面：&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/categories/PHP/Swoole/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>swoole  编译安装篇</title>
    <link href="http://www.iooeo.com/2017/07/31/swoole-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/31/swoole-编译安装篇/</id>
    <published>2017-07-31T09:45:37.000Z</published>
    <updated>2017-07-31T10:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>前边几篇文章，分别记录了</p>
<ul>
<li><a href="http://www.iooeo.com/2017/07/31/swoole-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%AF%87/">进程与线程</a></li>
<li><a href="http://www.iooeo.com/2017/07/31/swoole-I-O-%E6%A8%A1%E5%9E%8B/">I/O 模型</a></li>
<li><a href="http://www.iooeo.com/2017/07/31/swoole-%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E7%AF%87/">网络通讯协议</a></li>
</ul>
<p>其实都是为了我们更好的学习 Swoole 打下基础，Swoole 几乎涉及到网络开发的方方面面，但是这些可能不是每个 phper所具备的。<br><a id="more"></a><br>学了那么多网络基础知识，下面我们开始慢慢的接触 Swoole，后边有需要补充的网络知识，也会文章记录。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>安装部分我只针对我自己的电脑做安装记录，其他系统的同学可以网上找相关教程。</p>
<ul>
<li>macOS Sierra 10.12.6</li>
<li>PHP 5.6.28</li>
<li>gcc</li>
<li>make</li>
<li>autoconf</li>
<li>Swoole 2.0.7</li>
</ul>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><ul>
<li>下载 Swoole 最新版本到本地，<a href="https://git.oschina.net/swoole/swoole/tree/v2.0.7" target="_blank" rel="external">官网下载链接</a></li>
<li>下载好以后解压</li>
</ul>
<p>终端执行编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd swoole</div><div class="line">$ phpize</div><div class="line">$ ./configure</div><div class="line">$ make </div><div class="line">$ sudo make install</div></pre></td></tr></table></figure></p>
<p>执行完以上命令，中途没有报错的话，就表示已经安装完成。<br>下面我们来检查一下到底有没有安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ php -m | grep swoole</div><div class="line">swoole</div><div class="line">$ php --ri swoole | grep Version</div><div class="line">Version =&gt; 2.0.7</div></pre></td></tr></table></figure></p>
<p>到这里，已经完全没有问题了。如果你安装中碰到什么问题，可以留言，也可以直接联系，让我们共同应对问题，一起成长！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前边几篇文章，分别记录了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iooeo.com/2017/07/31/swoole-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%AF%87/&quot;&gt;进程与线程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iooeo.com/2017/07/31/swoole-I-O-%E6%A8%A1%E5%9E%8B/&quot;&gt;I/O 模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iooeo.com/2017/07/31/swoole-%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E7%AF%87/&quot;&gt;网络通讯协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实都是为了我们更好的学习 Swoole 打下基础，Swoole 几乎涉及到网络开发的方方面面，但是这些可能不是每个 phper所具备的。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/categories/PHP/Swoole/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>swoole 网络通讯协议篇</title>
    <link href="http://www.iooeo.com/2017/07/31/swoole-%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/31/swoole-网络通讯协议篇/</id>
    <published>2017-07-31T09:11:46.000Z</published>
    <updated>2017-07-31T09:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时我们打开一个浏览器，然后输入网址后回车，即展现了一个网页的内容。这是一个非常简单的操作。我们来简单的概括下背后的逻辑。<br><a id="more"></a></p>
<ol>
<li>浏览器通过TCP/IP协议建立到服务器的TCP连接</li>
<li>客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档</li>
<li>服务器向客户端发送HTTP协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端</li>
<li>客户端与服务器断开，由客户端解释HTML文档，在客户端屏幕上渲染图形结果</li>
</ol>
<p>表面上看这就是两台电脑之间进行的一种通信。<br>更确切的说，是两台计算机上两个进程之间的通信。你打开浏览器相当于启动了一个浏览器进程，而服务端事先也启动了某个进程，在某个端口监听，时刻等待客户端的连接。</p>
<p><em>那么问题来了，为什么客户端可以请求到服务器呢？服务器上跑那么多服务，又是怎么知道客户端想要什么呢？</em><br>其实答案很简单，因为有网络。计算机为了联网，就必须遵循通信协议。早期的互联网有很多协议，但是最重要的就非TCP协议和IP协议莫属了。所以，我们把互联网的协议简称为TCP/IP协议。</p>
<p>想必大家都有过这样的经历，客户端通过telnet连接服务器的时候，往往都需要一个ip地址和一个端口。如果客户端跟服务器之间有数据的交互，其过程大致是这样的：</p>
<h3 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h3><p>IP协议负责把你本机的数据发送到服务端，数据被分割成一块一块的。然后通过IP包发送出去。IP包的特点是按块发送，但不保证能到达，也不保证数据块依次到达。<br>如果是这样进行数据传输，服务器根本不能保证接收到的数据的完整性和顺序性，这样是不是就会有很大的问题呢？</p>
<h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><p>于是乎，TCP协议应运而生，它是建立在IP协议之上，专门负责建立可靠连接，并保证数据包顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方顺序收到，如果出现丢包，则重新发送。<br>这个时候再说TCP协议是一种面向连接、可靠的、基于IP之上的传出层协议就不难理解了吧。</p>
<p>TCP协议还有一个更重要的特点，它是基于<em>数据流</em>的。<br>什么意思呢？这就好比客户端和服务端要进行数据交互，中间有一个管子连接着，这个时候交互数据就好比管子中的水，当数据在传输（水在流动）的过程中，服务端是无法知道哪段数据是我们想要的完整数据。怎么解决这一问题呢？这个时候就需要双方约定一个协议来解决了。再往后说就说到应用层协议了，比如http协议，我们姑且不谈。</p>
<h3 id="UDP-协议"><a href="#UDP-协议" class="headerlink" title="UDP 协议"></a>UDP 协议</h3><p>TCP懂了，UDP自然就不难理解了。<br>相对于TCP,使用UDP协议进行通信的最大区别就是，UDP不需要建立连接，给他一个ip和端口，就可以直接发送数据包了。但是，能不能成功到达就不知道了。虽然UDP传输不可靠，但是速度快。对于一些对数据要求不高的场景，使用UDP通信无疑是不错的选择。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时我们打开一个浏览器，然后输入网址后回车，即展现了一个网页的内容。这是一个非常简单的操作。我们来简单的概括下背后的逻辑。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/categories/PHP/Swoole/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title> swoole I/O 模型</title>
    <link href="http://www.iooeo.com/2017/07/31/swoole-I-O-%E6%A8%A1%E5%9E%8B/"/>
    <id>http://www.iooeo.com/2017/07/31/swoole-I-O-模型/</id>
    <published>2017-07-31T08:49:12.000Z</published>
    <updated>2017-07-31T09:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>I/O即Input/Output,输入和输出的意思。在计算机的世界里，涉及到数据交换的地方，比如磁盘、网络等，就需要I/O接口。<br><a id="more"></a><br>通常，I/O是相对的。比如说你打开浏览器，通过网络I/O获取我们网站的网页，浏览器首先会往服务器发送请求，这是一个Output操作，随后服务器给浏览器返回信息，这就是一个Input操作。以上都是基于浏览器而言。但是，有些操作就比较特殊。比如程序在运行时，数据被加载在内存中，通过程序往磁盘写数据，对内存而言，这就是单方面的的Output。<br>I/O模型通常有很多种，我们简单介绍下同步I/O和异步I/O。</p>
<h2 id="同步I-O"><a href="#同步I-O" class="headerlink" title="同步I/O"></a>同步I/O</h2><ul>
<li>实际上我们刚刚介绍的浏览器请求服务器的过程正是同步I/O的例子。</li>
<li>那我们再比如，假设我们要通过程序往磁盘写大量的数据，如果没有磁盘I/O操作，php程序在内存中执行的速度是非常快的，但是磁盘写数据的过程相对而言就是漫长的，CPU就需要等待磁盘I/O操作之后才能继续执行其他代码，像上面这两种情况，我们都称之为同步I/O。</li>
</ul>
<p>php本身是单线程的，当php进程被挂起的时候，像上面的读取磁盘数据，往磁盘写数据，在I/O操作之前php代码就没办法继续执行了。<br>因为I/O操作阻塞了当前线程，如果某用户也想从磁盘上读取或者写数据，就需要等待。</p>
<p>有些人要反驳了，这不对呀，我经历不是这样的，很多人可以同时访问我的网站，这没问题的。<br>这个没必要纠结，php本身是单进程单线程的，用户可以同时访问你的网站实际上是web服务器的功劳。这就是我们之前讨论过的，如何解决多任务的问题。<br>web服务器的进程模型暂时不多讨论，免得懵。<br>如果不考虑web服务器，是不是当前进程一旦阻塞，其他人访问php都会被阻塞啦？答案是肯定的。要解决这个问题，又回到我们一直强调的多进程或者多线程。</p>
<p>但是，如果为了解决并发问题，系统开启了大量的进程，就像我们之前说的，操作系统在进程或者线程间切换同样会造成CPU大量的开销。有没有更好的解决方案呢？</p>
<h2 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a>异步I/O</h2><p>答案就是异步I/O。我们再来强调一遍异步I/O是要解决什么问题的：<em>同一线程内，执行一些耗时的任务时，其他代码是不能继续执行的，要等待该任务操作完之后才可以。</em></p>
<h2 id="同步I-O和异步I-O区别"><a href="#同步I-O和异步I-O区别" class="headerlink" title="同步I/O和异步I/O区别"></a>同步I/O和异步I/O区别</h2><p>同步I/O模型下，主线程只能被挂起等待，但是在异步I/O模型中，主线程发起I/O指令后，可以继续执行其他指令，没有被挂起，也没有切换线程的操作。由此看来，使用异步I/O明显可以提高了系统性能。</p>
<blockquote>
<p>其实I/O模型远不止我们介绍的这两种，有兴趣的可以借助google更深层次的了解一下。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I/O即Input/Output,输入和输出的意思。在计算机的世界里，涉及到数据交换的地方，比如磁盘、网络等，就需要I/O接口。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/categories/PHP/Swoole/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>swoole 进程与线程篇</title>
    <link href="http://www.iooeo.com/2017/07/31/swoole-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/31/swoole-进程与线程篇/</id>
    <published>2017-07-31T07:57:53.000Z</published>
    <updated>2017-07-31T09:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的物联网设备架构有所调整，需要长连接保持，一直觊觎了很久的 Swoole 学习提上日程。<br>至于 Swoole 是做什么的，<a href="http://www.swoole.com/" target="_blank" rel="external">Swoole官网</a>给出了一堆很 NB 的介绍。总之你需要知道<br><a id="more"></a><br><code>swoole是基于C开发的一个php扩展，类似你熟悉的Mysqli、cURL等等。但是swoole更强大，它几乎重新定义了php的高度，让php变得更加无可挑剔。也让phper们的前景更加辽阔！</code></p>
<p>既然 Swoole 那边 NB 闪闪，感觉一副高大上的样子，那再学习之前必须要做好预习准备啦。下面的笔记借鉴了白狼栈的学习教程，有兴趣的同学可以付费认证的看上一遍，真的写的很不错！</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>对于操作系统而言，进程就是一个任务，比方说你打开了一个记事本，那就启动了一个进程，打开了两个浏览器，就是另外开启了两个进程，简单的说一个进程至少要干一件事情。<br>对于Linux 系统而言，如果你想查看当前系统中运行的进程，可以通过 ps命令进行查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ps aux | grep php</div></pre></td></tr></table></figure></p>
<p>执行以上命令，我能够看到我机器上运行的 PHP 进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ps aux | grep php</div><div class="line">www        2051   0.0  0.0  2484400   2572   ??  S     9:08上午   0:00.05 php-fpm</div><div class="line">www        2050   0.0  0.0  2484528   2976   ??  S     9:08上午   0:00.16 php-fpm</div><div class="line">www        2049   0.0  0.0  2471088    396   ??  Ss    9:08上午   0:00.68 php-fpm</div><div class="line">www       59050   0.0  0.0  2442020   1968 s001  S+    3:52下午   0:00.00 grep php</div></pre></td></tr></table></figure></p>
<p>至于后边一堆时间什么的，如果不知道什么意思，建议看下鸟哥的 Linux 基础。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>有些情况下，一个进程会同时做一些事情，比如说word。它可以同时进行打字、拼写检查等操作。注意这里我们说的同时进行。像这样，在一个进程内部，同时运行着多个“子任务”，我们就可以把这些子任务称之为“线程”。即进程是由多个线程组成的，一个进程至少要有一个线程。实际上，线程是操作系统最小的执行单元。</p>
<h2 id="多任务的实现"><a href="#多任务的实现" class="headerlink" title="多任务的实现"></a>多任务的实现</h2><p>试想一下，如果我们要同时执行多个任务怎么办？</p>
<p>根据上文的理解，我们可以：</p>
<ul>
<li>启动多个进程</li>
<li>启动一个进程，并在该进程内启动多个线程</li>
<li>启动多个进程，每个进程内启动多个线程</li>
</ul>
<h2 id="多进程的实现"><a href="#多进程的实现" class="headerlink" title="多进程的实现"></a>多进程的实现</h2><p>熟悉 Apache 的同学其实很好理解。<br>当父进程监听到有新的请求时，Apache 就回 fork出一个新的子进程来对之进行处理。<br>Linux 的 fork（）函数通过系统调用即可实现创建一个与原进程几乎相同的进程。对于多任务，通常我们会设计Master-Worker模式，即一个Master进程负责分配任务，多个Worker进程负责执行任务。同理，如果是多线程，Master就是主线程，Worker就是子线程。</p>
<h2 id="多进程与多线程的区别"><a href="#多进程与多线程的区别" class="headerlink" title="多进程与多线程的区别"></a>多进程与多线程的区别</h2><p>开始迷糊了对吧，那就理解一下多进程和多线程的区别吧，以便应对场景做出合适的选择。<br>进程和线程的关系就像地主和佃户。地主，有土地（系统资源）；佃户，执行种地流程；</p>
<ul>
<li><p>多进程的优点就是稳定性很高，如果一个进程挂了，不会影响其他子进程，当然，如果主进程挂了那就都玩完（主进程挂掉的可能性微乎其微，后面讲进程模型会说到）。而对于多线程，这个恐怕就是致命的缺点了，因为所有线程共享内存，如果某一个线程挂了，那这个进程几乎就崩溃了。</p>
</li>
<li><p>性能方面，不论是进程还是线程，如果启动太多，无疑都会带来CPU的调度问题，因为进程或者线程的切换，本身就非常耗费资源。数量达到一定程度的时候，CPU和内存就消耗殆尽，电脑就死机了。<br>举一个例子：使用过windows的用户都知道，如果我们打开的软件越多（开启的进程也就越多），电脑就会越卡，甚至装死机没反应。</p>
</li>
<li><p>线程与进程相比，自然是要比进程更轻量一些，而且线程之间是共享内存的，所以不同线程之间的交互就显得容易实现。而对于多进程之间的通信，需要借助消息队列，共享内存等复杂的方式才可以实现。</p>
</li>
</ul>
<blockquote>
<p>进程和线程一定要研究明白是怎么回事<br>思考一下php、nginx、apache各自跟线程和进程是什么关系，可百度，可google，可下面留言。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司的物联网设备架构有所调整，需要长连接保持，一直觊觎了很久的 Swoole 学习提上日程。&lt;br&gt;至于 Swoole 是做什么的，&lt;a href=&quot;http://www.swoole.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swoole官网&lt;/a&gt;给出了一堆很 NB 的介绍。总之你需要知道&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/categories/PHP/Swoole/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Swoole" scheme="http://www.iooeo.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>新的评论系统</title>
    <link href="http://www.iooeo.com/2017/07/28/%E6%96%B0%E7%9A%84%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.iooeo.com/2017/07/28/新的评论系统/</id>
    <published>2017-07-28T07:08:41.000Z</published>
    <updated>2017-07-28T07:12:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>继多说关闭以后,网易又随之而去.这对于没有自己搭建评论系统的我来说,无疑是一个非常不愉快的消息.</code><br><code>but,今天新的评论系统终于安装成功,经过了十几天的域名备案,大家又可以畅所欲言了.</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;继多说关闭以后,网易又随之而去.这对于没有自己搭建评论系统的我来说,无疑是一个非常不愉快的消息.&lt;/code&gt;&lt;br&gt;&lt;code&gt;but,今天新的评论系统终于安装成功,经过了十几天的域名备案,大家又可以畅所欲言了.&lt;/code&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="杂谈" scheme="http://www.iooeo.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="微语" scheme="http://www.iooeo.com/tags/%E5%BE%AE%E8%AF%AD/"/>
    
      <category term="胡侃" scheme="http://www.iooeo.com/tags/%E8%83%A1%E4%BE%83/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 请求(Requests)</title>
    <link href="http://www.iooeo.com/2017/07/22/Yii2-%E8%AF%B7%E6%B1%82-Requests/"/>
    <id>http://www.iooeo.com/2017/07/22/Yii2-请求-Requests/</id>
    <published>2017-07-22T03:42:41.000Z</published>
    <updated>2017-07-22T04:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇不讲插件，讲一下 Yii2的请求（Requests），强行安利一波。<br><a id="more"></a></p>
<h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><p>要获取请求参数，你可以调用 <code>request</code> 组件的 <code>get()</code> 方法和 <code>post()</code> 方法。 他们分别返回 <code>$_GET 和</code> <code>$_POST</code> 的值。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$request = Yii::$app-&gt;request;</div><div class="line"></div><div class="line">$get = $request-&gt;get(); </div><div class="line">// 等价于: $get = $_GET;</div><div class="line"></div><div class="line">$id = $request-&gt;get(&apos;id&apos;);   </div><div class="line">// 等价于: $id = isset($_GET[&apos;id&apos;]) ? $_GET[&apos;id&apos;] : null;</div><div class="line"></div><div class="line">$id = $request-&gt;get(&apos;id&apos;, 1);   </div><div class="line">// 等价于: $id = isset($_GET[&apos;id&apos;]) ? $_GET[&apos;id&apos;] : 1;</div><div class="line"></div><div class="line">$post = $request-&gt;post(); </div><div class="line">// 等价于: $post = $_POST;</div><div class="line"></div><div class="line">$name = $request-&gt;post(&apos;name&apos;);   </div><div class="line">// 等价于: $name = isset($_POST[&apos;name&apos;]) ? $_POST[&apos;name&apos;] : null;</div><div class="line"></div><div class="line">$name = $request-&gt;post(&apos;name&apos;, &apos;&apos;);   </div><div class="line">// 等价于: $name = isset($_POST[&apos;name&apos;]) ? $_POST[&apos;name&apos;] : &apos;&apos;;</div></pre></td></tr></table></figure></p>
<p>如果嫌每次都要这么写一大堆很麻烦的话，下面就教你一个简单的。<br>首先你所有的<code>Controller</code>都要继承一个<code>BaseController</code>，然后在你的<code>BaseController</code>里添加一下方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function post($param = null, $default_value = null)</div><div class="line">&#123;</div><div class="line">    return !$param ? Yii::$app-&gt;request-&gt;post() : Yii::$app-&gt;request-&gt;post($param, $default_value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么其他<code>Controller</code>用的时候就可以直接这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public function actionIndex()</div><div class="line">&#123;</div><div class="line">	// 无默认值</div><div class="line">	$name = $this-&gt;post(&apos;name&apos;);</div><div class="line">	// 有默认值</div><div class="line">	$name = $this-&gt;post(&apos;name&apos;,&apos;ewan&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我上边只实例了 POST 请求，GET 请求同理，需要的话可以直接加上就可以了。</p>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p>你可以通过 Yii::$app-&gt;request-&gt;method 表达式来获取当前请求使用的HTTP方法。 这里还提供了一整套布尔属性用于检测当前请求是某种类型。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$request = Yii::$app-&gt;request;</div><div class="line"></div><div class="line">if ($request-&gt;isAjax) &#123; /* 该请求是一个 AJAX 请求 */ &#125;</div><div class="line">if ($request-&gt;isGet)  &#123; /* 请求方法是 GET */ &#125;</div><div class="line">if ($request-&gt;isPost) &#123; /* 请求方法是 POST */ &#125;</div><div class="line">if ($request-&gt;isPut)  &#123; /* 请求方法是 PUT */ &#125;</div></pre></td></tr></table></figure></p>
<h2 id="请求URLs"><a href="#请求URLs" class="headerlink" title="请求URLs"></a>请求URLs</h2><p>假设被请求的URL是 <code>http://example.com/admin/index.php/product?id=100</code>，你可以像下面描述的那样获取URL的各个部分：</p>
<ul>
<li><code>yii\web\Request::url</code>：返回 <code>/admin/index.php/product?id=100</code>, 此URL不包括<code>host info</code>部分。</li>
<li><code>yii\web\Request::absoluteUrl</code>：返回 <code>http://example.com/admin/index.php/product?id=100</code>, 包含<code>host infode</code>的整个URL。</li>
<li><code>yii\web\Request::hostInfo</code>：返回 <code>http://example.com</code>, 只有<code>host info</code>部分。</li>
<li><code>yii\web\Request::pathInfo</code>：返回 <code>/product</code>， 这个是入口脚本之后，问号之前（查询字符串）的部分。</li>
<li><code>yii\web\Request::queryString</code>：返回 <code>id=100</code>,问号之后的部分。</li>
<li><code>yii\web\Request::baseUrl</code>：返回 <code>/admin</code>, <code>host info</code>之后， 入口脚本之前的部分。</li>
<li><code>yii\web\Request::scriptUrl</code>：返回 <code>/admin/index.php</code>, 没有<code>path info</code>和查询字符串部分。</li>
<li><code>yii\web\Request::serverName</code>：返回 <code>example.com</code>, URL中的<code>host name</code>。</li>
<li><code>yii\web\Request::serverPort</code>：返回 <code>80</code>, 这是<code>web</code>服务中使用的端口。</li>
</ul>
<h2 id="HTTP头"><a href="#HTTP头" class="headerlink" title="HTTP头"></a>HTTP头</h2><p>你可以通过 <code>yii\web\Request::headers</code> 属性返回的 <code>header collection</code> 获取<code>HTTP</code>头信息。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// $headers 是一个 yii\web\HeaderCollection 对象</div><div class="line">$headers = Yii::$app-&gt;request-&gt;headers;</div><div class="line"></div><div class="line">// 返回 Accept header 值</div><div class="line">$accept = $headers-&gt;get(&apos;Accept&apos;);</div><div class="line"></div><div class="line">if ($headers-&gt;has(&apos;User-Agent&apos;)) &#123; /* 这是一个 User-Agent 头 */ &#125;</div></pre></td></tr></table></figure></p>
<p>请求组件也提供了支持快速访问常用头的方法，包括：</p>
<ul>
<li><code>yii\web\Request::userAgent</code>：返回 <code>User-Agent</code> 头。</li>
<li><code>yii\web\Request::contentType</code>：返回 <code>Content-Type</code> 头的值， <code>Content-Type</code> 是请求体中MIME类型数据。</li>
<li><code>yii\web\Request::acceptableContentTypes</code>：返回用户可接受的内容MIME类型。 返回的类型是按照他们的质量得分来排序的。得分最高的类型将被最先返回。</li>
<li><code>yii\web\Request::acceptableLanguages</code>：返回用户可接受的语言。 返回的语言是按照他们的偏好层次来排序的。第一个参数代表最优先的语言。</li>
</ul>
<p>假如你的应用支持多语言，并且你想在终端用户最喜欢的语言中显示页面， 那么你可以使用语言协商方法 <code>yii\web\Request::getPreferredLanguage()</code>。 这个方法通过 <code>yii\web\Request::acceptableLanguages</code> 在你的应用中所支持的语言列表里进行比较筛选，返回最适合的语言。</p>
<blockquote>
<p>提示: 你也可以使用 ContentNegotiator 过滤器进行动态确定哪些内容类型和语言应该在响应中使用。 这个过滤器实现了上面介绍的内容协商的属性和方法。</p>
</blockquote>
<h2 id="客户端信息"><a href="#客户端信息" class="headerlink" title="客户端信息"></a>客户端信息</h2><p>你可以通过 <code>yii\web\Request::userHost</code> 和 <code>yii\web\Request::userIP</code> 分别获取<code>host name</code>和客户机的IP地址， 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$userHost = Yii::$app-&gt;request-&gt;userHost;</div><div class="line">$userIP = Yii::$app-&gt;request-&gt;userIP;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇不讲插件，讲一下 Yii2的请求（Requests），强行安利一波。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/PHP/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 文件上传插件</title>
    <link href="http://www.iooeo.com/2017/07/22/Yii2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/"/>
    <id>http://www.iooeo.com/2017/07/22/Yii2-文件上传插件/</id>
    <published>2017-07-22T03:22:58.000Z</published>
    <updated>2017-07-22T03:38:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传的需求也是必不可少，带飞一波。<br><a id="more"></a></p>
<h2 id="文件上传插件-yii2-widget-fileinput"><a href="#文件上传插件-yii2-widget-fileinput" class="headerlink" title="文件上传插件 yii2-widget-fileinput"></a>文件上传插件 yii2-widget-fileinput</h2><p><a href="https://github.com/yangyiyuan/yii2-widget-fileinput" target="_blank" rel="external">yii2-widget-fileinput</a>小部件是基于Krajee的Bootstrap FileInput JQuery插件的定制文件输入小部件。想了解的话，可以点连接进入 GitHub 查看详细信息。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>切换到项目目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd project</div></pre></td></tr></table></figure></p>
<h4 id="安装方法一"><a href="#安装方法一" class="headerlink" title="安装方法一"></a>安装方法一</h4><p>执行 <em>composer</em>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer require kartik-v/yii2-widget-fileinput &quot;@dev&quot;</div></pre></td></tr></table></figure></p>
<h4 id="安装方法二"><a href="#安装方法二" class="headerlink" title="安装方法二"></a>安装方法二</h4><p>在项目目录下的<em>composer.json</em>文件中如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;require&quot;: &#123;</div><div class="line">    ...,</div><div class="line">    &quot;kartik-v/yii2-widget-fileinput&quot;: &quot;@dev&quot;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行<em>composer</em>更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer update</div></pre></td></tr></table></figure></p>
<h2 id="使用-FileInput-插件"><a href="#使用-FileInput-插件" class="headerlink" title="使用 FileInput 插件"></a>使用 FileInput 插件</h2><p>插件的使用可以分为两种，一种是独立的使用，一种是结合 Yii2的ActiveForm组件使用</p>
<h4 id="独立使用"><a href="#独立使用" class="headerlink" title="独立使用"></a>独立使用</h4><p>直接调用，在视图文件中写入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">use kartik\file\FileInput;</div><div class="line"></div><div class="line">echo &apos;&lt;label class=&quot;control-label&quot;&gt;Add Attachments&lt;/label&gt;&apos;;</div><div class="line">echo FileInput::widget([</div><div class="line">    &apos;model&apos; =&gt; $model,</div><div class="line">    &apos;attribute&apos; =&gt; &apos;attachment_1&apos;,</div><div class="line">    &apos;options&apos; =&gt; [&apos;multiple&apos; =&gt; true]</div><div class="line">]);</div></pre></td></tr></table></figure></p>
<h4 id="结合ActiveForm表单组件使用"><a href="#结合ActiveForm表单组件使用" class="headerlink" title="结合ActiveForm表单组件使用"></a>结合ActiveForm表单组件使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use kartik\file\FileInput;</div><div class="line"></div><div class="line">echo $form-&gt;field($model, &apos;avatar&apos;)-&gt;widget(FileInput::classname(), [</div><div class="line">    &apos;options&apos; =&gt; [&apos;accept&apos; =&gt; &apos;image/*&apos;],</div><div class="line">]);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件上传的需求也是必不可少，带飞一波。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/PHP/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 时间插件</title>
    <link href="http://www.iooeo.com/2017/07/22/Yii2-%E6%97%B6%E9%97%B4%E6%8F%92%E4%BB%B6/"/>
    <id>http://www.iooeo.com/2017/07/22/Yii2-时间插件/</id>
    <published>2017-07-22T02:33:38.000Z</published>
    <updated>2017-07-22T03:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目开发中难免会用到时间插件，这里我找了一个使用比较广泛的时间插件。用法如下：<br><a id="more"></a></p>
<h2 id="时间插件-yii2-widget-datetimepicker"><a href="#时间插件-yii2-widget-datetimepicker" class="headerlink" title="时间插件 yii2-widget-datetimepicker"></a>时间插件 yii2-widget-datetimepicker</h2><p><a href="https://github.com/yangyiyuan/yii2-widget-datetimepicker" target="_blank" rel="external">yii2-widget-datetimepicker</a>小部件是一个用于引导DateTimePicker插件的Yii 2包装器，它具有各种增强功能。想了解的话，可以点连接进入 GitHub 查看详细信息。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>切换到项目目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd project</div></pre></td></tr></table></figure></p>
<h4 id="安装方法一"><a href="#安装方法一" class="headerlink" title="安装方法一"></a>安装方法一</h4><p>执行 <em>composer</em>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer require kartik-v/yii2-widget-datetimepicker &quot;*&quot;</div></pre></td></tr></table></figure></p>
<h4 id="安装方法二"><a href="#安装方法二" class="headerlink" title="安装方法二"></a>安装方法二</h4><p>在项目目录下的<em>composer.json</em>文件中如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;require&quot;: &#123;</div><div class="line">    ...,</div><div class="line">    &quot;kartik-v/yii2-widget-datetimepicker&quot;: &quot;*&quot;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行<em>composer</em>更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer update</div></pre></td></tr></table></figure></p>
<h2 id="使用-DateTimePicker-插件"><a href="#使用-DateTimePicker-插件" class="headerlink" title="使用 DateTimePicker 插件"></a>使用 DateTimePicker 插件</h2><p>插件的使用可以分为两种，一种是独立的使用，一种是结合 Yii2的ActiveForm组件使用</p>
<h4 id="独立使用"><a href="#独立使用" class="headerlink" title="独立使用"></a>独立使用</h4><p>直接调用，在视图文件中写入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">use kartik\datetime\DateTimePicker;</div><div class="line"></div><div class="line">echo &apos;&lt;label&gt;Start Date/Time&lt;/label&gt;&apos;;</div><div class="line">echo DateTimePicker::widget([</div><div class="line">    &apos;name&apos; =&gt; &apos;datetime_10&apos;,</div><div class="line">    &apos;options&apos; =&gt; [&apos;placeholder&apos; =&gt; &apos;Select operating time ...&apos;],</div><div class="line">    &apos;convertFormat&apos; =&gt; true,</div><div class="line">    &apos;pluginOptions&apos; =&gt; [</div><div class="line">        &apos;format&apos; =&gt; &apos;d-M-Y g:i A&apos;,</div><div class="line">        &apos;startDate&apos; =&gt; &apos;01-Mar-2014 12:00 AM&apos;,</div><div class="line">        &apos;todayHighlight&apos; =&gt; true</div><div class="line">    ]</div><div class="line">]);</div></pre></td></tr></table></figure></p>
<h4 id="结合ActiveForm表单组件使用"><a href="#结合ActiveForm表单组件使用" class="headerlink" title="结合ActiveForm表单组件使用"></a>结合ActiveForm表单组件使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">use kartik\datetime\DateTimePicker;</div><div class="line">?&gt;</div><div class="line"></div><div class="line">&lt;?php $form = ActiveForm::begin(); ?&gt;</div><div class="line"></div><div class="line">&lt;?= $form-&gt;field($model, &apos;created_at&apos;)-&gt;widget(DateTimePicker::classname(), [</div><div class="line">        &apos;options&apos; =&gt; [&apos;placeholder&apos; =&gt; &apos;&apos;],</div><div class="line">        &apos;pluginOptions&apos; =&gt; [</div><div class="line">            &apos;autoclose&apos; =&gt; true,</div><div class="line">            &apos;format&apos; =&gt; &apos;yyyy-mm-dd hh:ii&apos;,</div><div class="line">            &apos;startDate&apos; =&gt; &apos;01-Mar-2014 12:00 AM&apos;,</div><div class="line">            &apos;todayHighlight&apos; =&gt; true</div><div class="line">        ]</div><div class="line">    ]);</div><div class="line">?&gt;</div><div class="line"></div><div class="line">&lt;?php ActiveForm::end(); ?&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目开发中难免会用到时间插件，这里我找了一个使用比较广泛的时间插件。用法如下：&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/PHP/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 批量插入</title>
    <link href="http://www.iooeo.com/2017/07/21/Yii2-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
    <id>http://www.iooeo.com/2017/07/21/Yii2-批量插入/</id>
    <published>2017-07-21T07:56:10.000Z</published>
    <updated>2017-07-22T02:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Yii2开发的过程中难免会遇到批量插入的问题，下边实例一下批量插入的操作。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$goods_model = new Goods();</div><div class="line"># 获取表名</div><div class="line">$table_name = $goods_model-&gt;tableName();</div><div class="line"></div><div class="line"># 要插入数据的字段 $fields = [&apos;name&apos;,&apos;price&apos;]；</div><div class="line">$fields = $goods_model-&gt;getAttributes();</div><div class="line">isset($fields[&apos;id&apos;]) &amp;&amp; unset($fields[&apos;id&apos;]);</div><div class="line"></div><div class="line"># 要插入的数据，这里要自己拼装，要和字段对应上</div><div class="line">$data = [[&apos;电视机&apos;，2999]，[&apos;电脑&apos;，3888]];</div><div class="line"></div><div class="line"># 返回总插入条数</div><div class="line">$total_num = Yii::$app-&gt;db-&gt;createCommand()-&gt;batchInsert($table_name, $fields, $data)-&gt;execute();</div></pre></td></tr></table></figure></p>
<p>批量插入的时候最好和 model 事务搭配，这样可以保证数据的完整性，也方便检查错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Yii2开发的过程中难免会遇到批量插入的问题，下边实例一下批量插入的操作。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/PHP/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2  molde模型相关使用技巧</title>
    <link href="http://www.iooeo.com/2017/07/21/Yii2-molde%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.iooeo.com/2017/07/21/Yii2-molde模型相关使用技巧/</id>
    <published>2017-07-21T05:24:51.000Z</published>
    <updated>2017-07-21T08:21:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天整理一些 Yii2 Model模型在开发中常用到的一些方法我技巧。<br><code>模型是 MVC 模式中的一部分， 是代表业务数据、规则和逻辑的对象。</code><br><a id="more"></a></p>
<h2 id="获取查询-SQL"><a href="#获取查询-SQL" class="headerlink" title="获取查询 SQL"></a>获取查询 SQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$query = User::find()-&gt;where([&apos;like&apos;, &apos;name&apos;, &apos;ewan%&apos;, false]);</div><div class="line"></div><div class="line">$commandQuery = clone $query;</div><div class="line">// SELECT * FROM `user` WHERE `name` LIKE &apos;ewan%&apos;</div><div class="line">echo $commandQuery-&gt;createCommand()-&gt;getRawSql();</div></pre></td></tr></table></figure>
<h2 id="简单查询技巧"><a href="#简单查询技巧" class="headerlink" title="简单查询技巧"></a>简单查询技巧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">where(): 添加查询条件。</div><div class="line">select(): 添加查询字段。</div><div class="line">with(): 该查询应执行的关系列表。</div><div class="line">indexBy(): 根据索引的列的名称查询结果。</div><div class="line">asArray(): 以数组的形式返回每条记录。</div><div class="line">orderBy(): 按指定字段排序。</div><div class="line"></div><div class="line">User::find()-&gt;one();	// 返回一条数据，返回对象；</div><div class="line">User::find()-&gt;column();	// 返回查询结果中的第一列的值,返回数组；</div><div class="line">User::find()-&gt;scalar();	// 返回查询结果的第一行中的第一列的值；</div><div class="line">User::find()-&gt;all();	// 返回所有记录数据；</div><div class="line">User::find()-&gt;count();	// 返回记录的数量；</div><div class="line">User::find()-&gt;sum(&apos;num&apos;);	// 返回指定字段（&apos;num&apos;）的总和；</div><div class="line">User::find()-&gt;average(&apos;num&apos;);	// 返回指定字段（&apos;num&apos;）的平均值；</div><div class="line">User::find()-&gt;min(&apos;num&apos;);	// 返回指定字段（&apos;num&apos;）的最小值；</div><div class="line">User::find()-&gt;max(&apos;num&apos;);	// 返回指定字段（&apos;num&apos;）的最大值；</div><div class="line">User::find()-&gt;exists();	// 返回一个值，该值指示查询结果是否有数据；</div></pre></td></tr></table></figure>
<p>关联查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User::hasOne()：返回对应关系的单条记录</div><div class="line">User::hasMany()：返回对应关系的多条记录</div></pre></td></tr></table></figure></p>
<h2 id="模型中事务处理"><a href="#模型中事务处理" class="headerlink" title="模型中事务处理"></a>模型中事务处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Yii::$app-&gt;db-&gt;transaction(function() &#123;</div><div class="line">    $order = new Order($customer);</div><div class="line">    $order-&gt;save();</div><div class="line">    $order-&gt;addItems($items);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><p>批量插入的问题，已经写了一篇<a href="http://www.iooeo.com/2017/07/21/Yii2-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/">《Yii2 批量插入》</a>,点击链接查看即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天整理一些 Yii2 Model模型在开发中常用到的一些方法我技巧。&lt;br&gt;&lt;code&gt;模型是 MVC 模式中的一部分， 是代表业务数据、规则和逻辑的对象。&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/PHP/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Apache 无法启动</title>
    <link href="http://www.iooeo.com/2017/07/20/Apache-%E5%9B%A0%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"/>
    <id>http://www.iooeo.com/2017/07/20/Apache-因监听端口被占用无法启动/</id>
    <published>2017-07-20T09:57:37.000Z</published>
    <updated>2017-07-21T03:11:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我一台 Windows 测试机 WAMP 的 Apache 无法启动，找了一下原因，原来 Apache 上某个监听的端口被占用，导致无法启动。<br>下面把发现问题，和解决问题的思路写一下。<br><a id="more"></a></p>
<h2 id="问题：WAMP-的-Apache-无法启动"><a href="#问题：WAMP-的-Apache-无法启动" class="headerlink" title="问题：WAMP 的 Apache 无法启动"></a>问题：WAMP 的 Apache 无法启动</h2><p>重启电脑后，打开 WAMP 一直显示橙色的图标，显示有一个程序无法启动。</p>
<h2 id="问题原因：Apache-因监听端口被占用无法启动"><a href="#问题原因：Apache-因监听端口被占用无法启动" class="headerlink" title="问题原因：Apache 因监听端口被占用无法启动"></a>问题原因：Apache 因监听端口被占用无法启动</h2><p>试了下 PHP 等正常运行无误，确认是 Apache 的问题，但是不知道为什么启动不了。</p>
<h3 id="手动启动-Apache"><a href="#手动启动-Apache" class="headerlink" title="手动启动 Apache"></a>手动启动 Apache</h3><p>我打开终端，将 Apache 的运行文件<em>\wamp64\bin\apache\apache2.4.23\bin\httpd.exe</em>拖到终端中执行，显示一下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ D:\wamp64\bin\apache\apache2.4.23\bin\httpd.exe</div><div class="line">(OS 10048)通常每个套接字地址(协议/网络地址/端口)只允许使用一次。  : AH00072: mak</div><div class="line">e_sock: could not bind to address 0.0.0.0:8080</div><div class="line">AH00451: no listening sockets available, shutting down</div><div class="line">AH00015: Unable to open logs</div></pre></td></tr></table></figure></p>
<p>此处可以看出错误，是因为 Apache 监听的8080端口被别的程序占用，导致无法启动。</p>
<h2 id="解决问题：使-Apache-正常运行"><a href="#解决问题：使-Apache-正常运行" class="headerlink" title="解决问题：使 Apache 正常运行"></a>解决问题：使 Apache 正常运行</h2><p>问题找到了就好办了，一下给出两种解决的办法。</p>
<h3 id="第一种，更换-Apache-监听的8080端口至别的端口"><a href="#第一种，更换-Apache-监听的8080端口至别的端口" class="headerlink" title="第一种，更换 Apache 监听的8080端口至别的端口"></a>第一种，更换 Apache 监听的8080端口至别的端口</h3><p>此种方法相对简单一些，如果在没有强制端口需求的情况下，也是最为推荐的方法。<br>打开你的Apache 虚拟主机配置文件<em>\wamp64\bin\apache\apache2.4.23\conf\extra\httpd-vhosts.com</em>,找到冲突的端口配置，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:8080&gt;</div><div class="line">	...</div><div class="line">	...</div><div class="line">	...</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>
<p>将8080（冲突的端口）修改为其他的端口号，重启 WAMP 或者 Apache就可以正常运行了。</p>
<h3 id="第二种，kill-掉占用冲突端口的程序"><a href="#第二种，kill-掉占用冲突端口的程序" class="headerlink" title="第二种，kill 掉占用冲突端口的程序"></a>第二种，kill 掉占用冲突端口的程序</h3><p>比如你就想使用这个端口，或者有强制需求要用这个端口，那就需要干掉占用这个端口的程序了。</p>
<h4 id="找到占用冲突端口的进程号"><a href="#找到占用冲突端口的进程号" class="headerlink" title="找到占用冲突端口的进程号"></a>找到占用冲突端口的进程号</h4><p>在终端执行命令，查看机器端口占用情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ netstat -ano</div></pre></td></tr></table></figure></p>
<p>会显示如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">活动连接</div><div class="line"></div><div class="line">  协议  本地地址          外部地址        状态           PID</div><div class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       976</div><div class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</div><div class="line">  TCP    0.0.0.0:2343           0.0.0.0:0              LISTENING       1972</div><div class="line">  TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING       3732</div><div class="line">  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       1532</div><div class="line">  TCP    0.0.0.0:3580           0.0.0.0:0              LISTENING       2100</div><div class="line">  TCP    0.0.0.0:3582           0.0.0.0:0              LISTENING       2620</div><div class="line">  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       3348</div><div class="line">  TCP    0.0.0.0:9418           0.0.0.0:0              LISTENING       4848</div></pre></td></tr></table></figure></p>
<p>通过上面的内容我们会看到监听8080端口的PID（进程号） 为3348。</p>
<h4 id="干掉-PID-为3348的程序"><a href="#干掉-PID-为3348的程序" class="headerlink" title="干掉 PID 为3348的程序"></a>干掉 PID 为3348的程序</h4><p>右击桌面底部的工具栏，选择启动任务管理器，然后点击服务，找到 PID 为3348的程序，右击选择停止服务，这样就可以了。<br><code>右击工具栏--&gt;启动任务管理器--&gt;服务--&gt;右击 PID 为3348的服务--&gt;停止服务</code><br>重启 WAMP 或者 Apache就可以正常运行了。</p>
<p>其实解决问题并不难，重要的是我们怎么样才能正确的找到问题的所在，这需要我们平时要树立一套比较合理的处理的问题的思路，<code>要做一个有思想的开发者!</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我一台 Windows 测试机 WAMP 的 Apache 无法启动，找了一下原因，原来 Apache 上某个监听的端口被占用，导致无法启动。&lt;br&gt;下面把发现问题，和解决问题的思路写一下。&lt;br&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://www.iooeo.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="WAMP" scheme="http://www.iooeo.com/tags/WAMP/"/>
    
      <category term="计算机" scheme="http://www.iooeo.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Apache" scheme="http://www.iooeo.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 底部修改</title>
    <link href="http://www.iooeo.com/2017/07/20/Hexo-%E5%BA%95%E9%83%A8%E4%BF%AE%E6%94%B9/"/>
    <id>http://www.iooeo.com/2017/07/20/Hexo-底部修改/</id>
    <published>2017-07-20T08:09:42.000Z</published>
    <updated>2017-07-28T06:55:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你想将博客底部修改的话，找到<em>/themes/next/layout/_partials/footer.swig</em>，<br><a id="more"></a><br>你可以按照你想要的内容编写 HTML 代码，就想我这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.copyright %&#125;</div><div class="line">&lt;div class=&quot;powered-by&quot;&gt;</div><div class="line">  &lt;span class=&quot;links-of-author-item&quot;&gt;</div><div class="line">    &lt;a href=&quot;https://github.com/yangyiyuan&quot; target=&quot;_blank&quot; title=&quot;GitHub&quot;&gt;</div><div class="line">    &lt;i class=&quot;fa fa-fw fa-github&quot;&gt;&lt;/i&gt;</div><div class="line">    GitHub</div><div class="line">    &lt;/a&gt;</div><div class="line">  &lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;theme-info&quot;&gt;</div><div class="line">  &lt;span class=&quot;links-of-author-item&quot;&gt;</div><div class="line">    &lt;a href=&quot;http://www.iooeo.com/about/&quot; target=&quot;_blank&quot; title=&quot;杨依园&quot;&gt;</div><div class="line">    &lt;i class=&quot;fa fa-fw fa-hand-o-right&quot;&gt;&lt;/i&gt;</div><div class="line">    做一个有思想的开发者---杨依园</div><div class="line">    &lt;/a&gt;</div><div class="line">  &lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你想将博客底部修改的话，找到&lt;em&gt;/themes/next/layout/_partials/footer.swig&lt;/em&gt;，&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo  文章版权转载链接</title>
    <link href="http://www.iooeo.com/2017/07/20/Hexo-%E6%96%87%E7%AB%A0%E7%89%88%E6%9D%83%E8%BD%AC%E8%BD%BD%E9%93%BE%E6%8E%A5/"/>
    <id>http://www.iooeo.com/2017/07/20/Hexo-文章版权转载链接/</id>
    <published>2017-07-20T07:50:12.000Z</published>
    <updated>2017-07-20T07:53:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果文章末尾需要添加版权信息和转载链接的话，找到<em>/hemes/next/layout/_macro/post.swig</em>，<br><a id="more"></a><br>找到其中的打赏部分代码，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &#123;% if ! is_index %&#125;</div><div class="line">    &#123;% include &apos;reward.swig&apos; %&#125;</div><div class="line">  &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>修改成下面这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div align=&quot;center&quot;&gt;</div><div class="line">  &#123;% if not is_index %&#125;</div><div class="line">    &lt;div class=&quot;copyright&quot;&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;</div><div class="line">    &lt;b&gt;本文地址：&lt;/b&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;&lt;br/&gt;&lt;b&gt;转载请注明出处，谢谢！&lt;/b&gt;</div><div class="line">    &lt;/span&gt;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &#123;% include &apos;reward.swig&apos; %&#125;</div><div class="line">  &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果文章末尾需要添加版权信息和转载链接的话，找到&lt;em&gt;/hemes/next/layout/_macro/post.swig&lt;/em&gt;，&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 头像圆形并旋转</title>
    <link href="http://www.iooeo.com/2017/07/20/Hexo-Next-%E5%A4%B4%E5%83%8F%E5%9C%86%E5%BD%A2%E5%B9%B6%E6%97%8B%E8%BD%AC/"/>
    <id>http://www.iooeo.com/2017/07/20/Hexo-Next-头像圆形并旋转/</id>
    <published>2017-07-20T07:38:22.000Z</published>
    <updated>2017-07-20T07:42:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>将头像显示成圆形，鼠标放上去有旋转效果，就像我的一样.<br>找到<em>/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</em><br><a id="more"></a><br>做以下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">.site-author-image &#123;</div><div class="line">  display: block;</div><div class="line">  margin: 0 auto;</div><div class="line">  padding: $site-author-image-padding;</div><div class="line">  max-width: $site-author-image-width;</div><div class="line">  height: $site-author-image-height;</div><div class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line">  # 头像圆形样式</div><div class="line">  /* start */</div><div class="line">  border-radius: 50%</div><div class="line">  webkit-transition: 1.4s all;</div><div class="line">  moz-transition: 1.4s all;</div><div class="line">  ms-transition: 1.4s all;</div><div class="line">  transition: 1.4s all;</div><div class="line">  /* end */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.site-author-name &#123;</div><div class="line">  margin: $site-author-name-margin;</div><div class="line">  text-align: $site-author-name-align;</div><div class="line">  color: $site-author-name-color;</div><div class="line">  font-weight: $site-author-name-weight;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.site-description &#123;</div><div class="line">  margin-top: $site-description-margin-top;</div><div class="line">  text-align: $site-description-align;</div><div class="line">  font-size: $site-description-font-size;</div><div class="line">  color: $site-description-color;</div><div class="line">&#125;</div><div class="line"># 头像旋转事件</div><div class="line">/* start */</div><div class="line">.site-author-image:hover &#123;</div><div class="line">  background-color: #55DAE1;</div><div class="line">  webkit-transform: rotate(360deg) scale(1.1);</div><div class="line">  moz-transform: rotate(360deg) scale(1.1);</div><div class="line">  ms-transform: rotate(360deg) scale(1.1);</div><div class="line">  transform: rotate(360deg) scale(1.1);</div><div class="line">&#125;</div><div class="line">/* end */</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将头像显示成圆形，鼠标放上去有旋转效果，就像我的一样.&lt;br&gt;找到&lt;em&gt;/themes/next/source/css/_common/components/sidebar/sidebar-author.styl&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 表单提交错误调试</title>
    <link href="http://www.iooeo.com/2017/07/20/Yii2-%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E9%94%99%E8%AF%AF%E8%B0%83%E8%AF%95/"/>
    <id>http://www.iooeo.com/2017/07/20/Yii2-表单提交错误调试/</id>
    <published>2017-07-20T05:59:02.000Z</published>
    <updated>2017-07-20T06:47:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用yii 开发项目的时候经常碰到一些数据插入时提交失败的情况，为了更精准的找到错误，yii 给我提供一下方法，用以调试<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo current(array_values($model-&gt;getFirstErrors()));</div><div class="line">exit;</div></pre></td></tr></table></figure></p>
<p><em>model</em>调用<em>load()</em>方法时出错时，用这个方法也可以</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用yii 开发项目的时候经常碰到一些数据插入时提交失败的情况，为了更精准的找到错误，yii 给我提供一下方法，用以调试&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.iooeo.com/categories/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/categories/PHP/Yii2/"/>
    
    
      <category term="PHP" scheme="http://www.iooeo.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="http://www.iooeo.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>Mac Python 版本切换</title>
    <link href="http://www.iooeo.com/2017/07/20/Mac-Python-%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/"/>
    <id>http://www.iooeo.com/2017/07/20/Mac-Python-版本切换/</id>
    <published>2017-07-20T03:24:50.000Z</published>
    <updated>2017-07-20T03:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 上自带的 Python 版本是2.7的，对于编程语言的发展来说，每一个大的版本更新都有很大的改变，所以我碰到了版本切换的问题。<br><a id="more"></a></p>
<h2 id="下载安装新版本"><a href="#下载安装新版本" class="headerlink" title="下载安装新版本"></a>下载安装新版本</h2><p>首先去官网下载一个最新的Python 版本，<a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="external">下载链接</a><br>下载好以后下一步下一步安装就可以了。</p>
<h2 id="切换-Python-版本"><a href="#切换-Python-版本" class="headerlink" title="切换 Python 版本"></a>切换 Python 版本</h2><p>安装好以后不代表就完成版本切换了。不信的话，你可以终端执行一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -V</div></pre></td></tr></table></figure></p>
<p>显示的还是2.7（老版本）的版本，那下面就开始切换吧</p>
<ul>
<li>首先要找到你新版本安装的路径<em>/usr/local/bin/python3</em></li>
<li>修改软链接到你所安装的python版本中：默认python命令是在/usr/bin/目录下 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo mv /usr/bin/python /usr/bin/python2.7.0</div><div class="line">$ sudo ln -s /usr/local/bin/python3 /usr/bin/python  #把系统默认python命令改成python3</div></pre></td></tr></table></figure>
</li>
</ul>
<p>完成以后在终端输入<code>python -V</code>即可查看python版本了，反正我是是最新的版本了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac 上自带的 Python 版本是2.7的，对于编程语言的发展来说，每一个大的版本更新都有很大的改变，所以我碰到了版本切换的问题。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.iooeo.com/categories/python/"/>
    
    
      <category term="python" scheme="http://www.iooeo.com/tags/python/"/>
    
      <category term="Mac" scheme="http://www.iooeo.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>python 开篇</title>
    <link href="http://www.iooeo.com/2017/07/20/python-%E5%BC%80%E7%AF%87/"/>
    <id>http://www.iooeo.com/2017/07/20/python-开篇/</id>
    <published>2017-07-20T02:22:43.000Z</published>
    <updated>2017-07-20T03:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。<br>Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议 。Python语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进。<br>Python具有丰富和强大的库。它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。常见的一种应用情形是，使用Python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，性能要求特别高，就可以用C/C++重写，而后封装为Python可以调用的扩展类库。需要注意的是在您使用扩展类库时可能需要考虑平台问题，某些可能不提供跨平台的实现。<br><a id="more"></a><br>由于没有实际项目运用，后边的文章权当是学习笔记了，可能只是一些基础的知识点，从各种博客文档中都能找得到，但写下自己的学习心得还是有必要的，希望在以后能有项目去运用到，这样我所学习的就不仅仅是一些基础的知识点了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。&lt;br&gt;Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议 。Python语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进。&lt;br&gt;Python具有丰富和强大的库。它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。常见的一种应用情形是，使用Python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，性能要求特别高，就可以用C/C++重写，而后封装为Python可以调用的扩展类库。需要注意的是在您使用扩展类库时可能需要考虑平台问题，某些可能不提供跨平台的实现。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.iooeo.com/categories/python/"/>
    
    
      <category term="python" scheme="http://www.iooeo.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 新建菜单(menu) 存放归档文章</title>
    <link href="http://www.iooeo.com/2017/07/20/Hexo-%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95-menu-%E5%AD%98%E6%94%BE%E5%BD%92%E6%A1%A3/"/>
    <id>http://www.iooeo.com/2017/07/20/Hexo-新建菜单-menu-存放归档/</id>
    <published>2017-07-20T01:53:08.000Z</published>
    <updated>2017-07-20T03:07:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看Python，想在首页上建一个名为Python的菜单，然后相关Python的文章都放在该分类下。<br><a id="more"></a><br>本来的想法是点开 Python 菜单会显示像首页的一样的文章列表，但试了几次没有成功，索性就就采取了一种分类归档的方法，效果还可以。</p>
<h2 id="生成-post-文章-时默认生成-categories-配置项"><a href="#生成-post-文章-时默认生成-categories-配置项" class="headerlink" title="生成 post(文章)时默认生成 categories 配置项"></a>生成 post(文章)时默认生成 categories 配置项</h2><p>在项目目录下找到<em>/scaffolds/post.md</em>，添加文章的 categories 的配置，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">	# 此处为文章标签</div><div class="line">categories:</div><div class="line">	# 此处为文章分类</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h2 id="写文章时，配置-categories"><a href="#写文章时，配置-categories" class="headerlink" title="写文章时，配置 categories"></a>写文章时，配置 categories</h2><p>下面我开始写一篇关于 Python 的文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo n &quot;python 开篇&quot;</div></pre></td></tr></table></figure></p>
<p>文章里面配置 categories<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: python 开篇</div><div class="line">date: 2017-07-20 10:22:43</div><div class="line">tags:</div><div class="line">	- python</div><div class="line">categories:</div><div class="line">	- python</div><div class="line">---</div><div class="line">Python 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。</div></pre></td></tr></table></figure></p>
<p>此处我已经配置好了标签（tags）和分类（categories），下面生成一下静态页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure></p>
<p>这时你会发现<em>/public/categories/</em>文件夹下，已经生成了<em>python</em>的文件夹</p>
<h2 id="首页显示-python-菜单"><a href="#首页显示-python-菜单" class="headerlink" title="首页显示 python 菜单"></a>首页显示 python 菜单</h2><p>这里就是要在博客首页上显示 python 菜单的时候了，首先打开你主题的配置文件<em>/themes/next/_config.yml</em>(我这里是用的 next)。<br>找到<em>menu</em> ，做一下添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories/</div><div class="line">  archives: /archives/</div><div class="line">  tags: /tags/</div><div class="line">  python: /categories/python/ # 此处为新添加的菜单</div><div class="line">  guestbook: /guestbook</div><div class="line">  about: /about/</div></pre></td></tr></table></figure></p>
<p>配置python菜单所用的图标<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  schedule: calendar</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  sitemap: sitemap</div><div class="line">  commonweal: heartbeat</div><div class="line">  guestbook: pencil</div><div class="line">  python: file-powerpoint-o # 此处为 python菜单的图片配置</div></pre></td></tr></table></figure></p>
<h2 id="菜单名称配置"><a href="#菜单名称配置" class="headerlink" title="菜单名称配置"></a>菜单名称配置</h2><p>上面的步骤做完以后，如果你着急刷新页面看了效果，就会看到新菜单的名称是<em>menu.python</em>，显然不是我们想要的，那就继续往下看<br>首先查看项目目录下的<em>/_config.yml</em>的<em>language</em>配置，我的是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">language: zh-Hans</div></pre></td></tr></table></figure></p>
<p>然后去模板目录找到相应的语言配置文件<em>/themes/languages/zh-Hans.yml</em>，<em>menu</em>处添加一下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: 首页</div><div class="line">  archives: 归档</div><div class="line">  categories: 分类</div><div class="line">  tags: 标签</div><div class="line">  about: 关于</div><div class="line">  search: 搜索</div><div class="line">  schedule: 日程表</div><div class="line">  sitemap: 站点地图</div><div class="line">  commonweal: 公益404</div><div class="line">  guestbook: 留言</div><div class="line">  python: python # python菜单显示的名称</div></pre></td></tr></table></figure></p>
<p>这样就算彻底完成了，赶紧去看看效果吧。<br>以后写Python 相关的文章的话，只需要配置 categories 为 python 就可以自动归档到python 菜单下了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看Python，想在首页上建一个名为Python的菜单，然后相关Python的文章都放在该分类下。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iooeo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iooeo.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>评论系统相继关闭</title>
    <link href="http://www.iooeo.com/2017/07/07/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E7%9B%B8%E7%BB%A7%E5%85%B3%E9%97%AD/"/>
    <id>http://www.iooeo.com/2017/07/07/评论系统相继关闭/</id>
    <published>2017-07-07T03:28:57.000Z</published>
    <updated>2017-07-20T03:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前段时间,多说系统宣布关闭停止服务,偶感还挺可惜的.<br>最近折腾这上了网易跟帖,来替换多说,今天登陆网易跟帖后台,又看到了一个不好的消息</p>
</blockquote>
<p>网易云跟贴停止服务公告<br>亲爱的朋友们：</p>
<p>因公司业务发展需要，我们不得不遗憾地通知大家，云跟贴产品将于2017年8月1日停止服务。在此之前可以通过后台的数据导出功能导出自己站点的跟贴数据。感谢大家一直以来对云跟贴的支持与厚爱，对于此次产品关停给您带来的不便我们深表歉意，希望在网易其他产品与业务上，我们能继续为您服务！</p>
<p>网易云跟贴</p>
<p>2017年7月6日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前段时间,多说系统宣布关闭停止服务,偶感还挺可惜的.&lt;br&gt;最近折腾这上了网易跟帖,来替换多说,今天登陆网易跟帖后台,又看到了一个不好的消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网易云跟贴停止服务公告&lt;br&gt;亲爱的朋友们：&lt;/p&gt;
&lt;p&gt;因公
    
    </summary>
    
      <category term="杂谈" scheme="http://www.iooeo.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="微语" scheme="http://www.iooeo.com/tags/%E5%BE%AE%E8%AF%AD/"/>
    
      <category term="胡侃" scheme="http://www.iooeo.com/tags/%E8%83%A1%E4%BE%83/"/>
    
  </entry>
  
</feed>
